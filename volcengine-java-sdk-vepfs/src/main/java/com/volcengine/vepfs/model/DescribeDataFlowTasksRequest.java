/*
 * vepfs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vepfs.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DescribeDataFlowTasksRequest
 */



public class DescribeDataFlowTasksRequest {
  @SerializedName("DataFlowTaskIds")
  private String dataFlowTaskIds = null;

  @SerializedName("FileSystemId")
  private String fileSystemId = null;

  @SerializedName("PageNumber")
  private Integer pageNumber = null;

  @SerializedName("PageSize")
  private Integer pageSize = null;

  @SerializedName("Status")
  private String status = null;

  /**
   * Gets or Sets taskAction
   */
  @JsonAdapter(TaskActionEnum.Adapter.class)
  public enum TaskActionEnum {
    @SerializedName("Import")
    IMPORT("Import"),
    @SerializedName("Export")
    EXPORT("Export"),
    @SerializedName("Inventory")
    INVENTORY("Inventory"),
    @SerializedName("Delete")
    DELETE("Delete");

    private String value;

    TaskActionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TaskActionEnum fromValue(String input) {
      for (TaskActionEnum b : TaskActionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TaskActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaskActionEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TaskActionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TaskActionEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("TaskAction")
  private TaskActionEnum taskAction = null;

  public DescribeDataFlowTasksRequest dataFlowTaskIds(String dataFlowTaskIds) {
    this.dataFlowTaskIds = dataFlowTaskIds;
    return this;
  }

   /**
   * Get dataFlowTaskIds
   * @return dataFlowTaskIds
  **/
  @Schema(description = "")
  public String getDataFlowTaskIds() {
    return dataFlowTaskIds;
  }

  public void setDataFlowTaskIds(String dataFlowTaskIds) {
    this.dataFlowTaskIds = dataFlowTaskIds;
  }

  public DescribeDataFlowTasksRequest fileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
    return this;
  }

   /**
   * Get fileSystemId
   * @return fileSystemId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getFileSystemId() {
    return fileSystemId;
  }

  public void setFileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
  }

  public DescribeDataFlowTasksRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * @return pageNumber
  **/
  @Schema(description = "")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public DescribeDataFlowTasksRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public DescribeDataFlowTasksRequest status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public DescribeDataFlowTasksRequest taskAction(TaskActionEnum taskAction) {
    this.taskAction = taskAction;
    return this;
  }

   /**
   * Get taskAction
   * @return taskAction
  **/
  @Schema(description = "")
  public TaskActionEnum getTaskAction() {
    return taskAction;
  }

  public void setTaskAction(TaskActionEnum taskAction) {
    this.taskAction = taskAction;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDataFlowTasksRequest describeDataFlowTasksRequest = (DescribeDataFlowTasksRequest) o;
    return Objects.equals(this.dataFlowTaskIds, describeDataFlowTasksRequest.dataFlowTaskIds) &&
        Objects.equals(this.fileSystemId, describeDataFlowTasksRequest.fileSystemId) &&
        Objects.equals(this.pageNumber, describeDataFlowTasksRequest.pageNumber) &&
        Objects.equals(this.pageSize, describeDataFlowTasksRequest.pageSize) &&
        Objects.equals(this.status, describeDataFlowTasksRequest.status) &&
        Objects.equals(this.taskAction, describeDataFlowTasksRequest.taskAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataFlowTaskIds, fileSystemId, pageNumber, pageSize, status, taskAction);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDataFlowTasksRequest {\n");
    
    sb.append("    dataFlowTaskIds: ").append(toIndentedString(dataFlowTaskIds)).append("\n");
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taskAction: ").append(toIndentedString(taskAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
