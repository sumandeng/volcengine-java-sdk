/*
 * vepfs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vepfs.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vepfs.model.EntryListFileInfoForCreateDataFlowTaskInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateDataFlowTaskRequest
 */



public class CreateDataFlowTaskRequest {
  @SerializedName("DataStorage")
  private String dataStorage = null;

  @SerializedName("DataStoragePath")
  private String dataStoragePath = null;

  /**
   * Gets or Sets dataType
   */
  @JsonAdapter(DataTypeEnum.Adapter.class)
  public enum DataTypeEnum {
    @SerializedName("Metadata")
    METADATA("Metadata"),
    @SerializedName("MetaAndData")
    METAANDDATA("MetaAndData");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DataTypeEnum fromValue(String input) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DataTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DataTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("DataType")
  private DataTypeEnum dataType = null;

  /**
   * Gets or Sets deleteRule
   */
  @JsonAdapter(DeleteRuleEnum.Adapter.class)
  public enum DeleteRuleEnum {
    @SerializedName("DELETE_TYPE_ONLY_FS")
    DELETE_TYPE_ONLY_FS("DELETE_TYPE_ONLY_FS"),
    @SerializedName("DELETE_TYPE_FS_WITH_LATEST_OBJECT")
    DELETE_TYPE_FS_WITH_LATEST_OBJECT("DELETE_TYPE_FS_WITH_LATEST_OBJECT"),
    @SerializedName("DELETE_TYPE_FS_WITH_ALLVERSION_OBJECT")
    DELETE_TYPE_FS_WITH_ALLVERSION_OBJECT("DELETE_TYPE_FS_WITH_ALLVERSION_OBJECT");

    private String value;

    DeleteRuleEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DeleteRuleEnum fromValue(String input) {
      for (DeleteRuleEnum b : DeleteRuleEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DeleteRuleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeleteRuleEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DeleteRuleEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DeleteRuleEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("DeleteRule")
  private DeleteRuleEnum deleteRule = null;

  @SerializedName("EntryListFileInfo")
  private EntryListFileInfoForCreateDataFlowTaskInput entryListFileInfo = null;

  /**
   * Gets or Sets exportSymlinkPolicy
   */
  @JsonAdapter(ExportSymlinkPolicyEnum.Adapter.class)
  public enum ExportSymlinkPolicyEnum {
    @SerializedName("Skip")
    SKIP("Skip"),
    @SerializedName("NormalFile")
    NORMALFILE("NormalFile");

    private String value;

    ExportSymlinkPolicyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ExportSymlinkPolicyEnum fromValue(String input) {
      for (ExportSymlinkPolicyEnum b : ExportSymlinkPolicyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ExportSymlinkPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExportSymlinkPolicyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ExportSymlinkPolicyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ExportSymlinkPolicyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ExportSymlinkPolicy")
  private ExportSymlinkPolicyEnum exportSymlinkPolicy = null;

  @SerializedName("FileSystemId")
  private String fileSystemId = null;

  @SerializedName("FilesetId")
  private String filesetId = null;

  /**
   * Gets or Sets sameNameFilePolicy
   */
  @JsonAdapter(SameNameFilePolicyEnum.Adapter.class)
  public enum SameNameFilePolicyEnum {
    @SerializedName("Skip")
    SKIP("Skip"),
    @SerializedName("KeepLatest")
    KEEPLATEST("KeepLatest"),
    @SerializedName("OverWrite")
    OVERWRITE("OverWrite");

    private String value;

    SameNameFilePolicyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SameNameFilePolicyEnum fromValue(String input) {
      for (SameNameFilePolicyEnum b : SameNameFilePolicyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SameNameFilePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SameNameFilePolicyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SameNameFilePolicyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SameNameFilePolicyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("SameNameFilePolicy")
  private SameNameFilePolicyEnum sameNameFilePolicy = null;

  @SerializedName("SubPath")
  private String subPath = null;

  /**
   * Gets or Sets taskAction
   */
  @JsonAdapter(TaskActionEnum.Adapter.class)
  public enum TaskActionEnum {
    @SerializedName("Import")
    IMPORT("Import"),
    @SerializedName("Export")
    EXPORT("Export"),
    @SerializedName("Inventory")
    INVENTORY("Inventory"),
    @SerializedName("Delete")
    DELETE("Delete");

    private String value;

    TaskActionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TaskActionEnum fromValue(String input) {
      for (TaskActionEnum b : TaskActionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TaskActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaskActionEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TaskActionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TaskActionEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("TaskAction")
  private TaskActionEnum taskAction = null;

  public CreateDataFlowTaskRequest dataStorage(String dataStorage) {
    this.dataStorage = dataStorage;
    return this;
  }

   /**
   * Get dataStorage
   * @return dataStorage
  **/
  @Schema(description = "")
  public String getDataStorage() {
    return dataStorage;
  }

  public void setDataStorage(String dataStorage) {
    this.dataStorage = dataStorage;
  }

  public CreateDataFlowTaskRequest dataStoragePath(String dataStoragePath) {
    this.dataStoragePath = dataStoragePath;
    return this;
  }

   /**
   * Get dataStoragePath
   * @return dataStoragePath
  **/
  @Schema(description = "")
  public String getDataStoragePath() {
    return dataStoragePath;
  }

  public void setDataStoragePath(String dataStoragePath) {
    this.dataStoragePath = dataStoragePath;
  }

  public CreateDataFlowTaskRequest dataType(DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * Get dataType
   * @return dataType
  **/
  @NotNull
  @Schema(required = true, description = "")
  public DataTypeEnum getDataType() {
    return dataType;
  }

  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }

  public CreateDataFlowTaskRequest deleteRule(DeleteRuleEnum deleteRule) {
    this.deleteRule = deleteRule;
    return this;
  }

   /**
   * Get deleteRule
   * @return deleteRule
  **/
  @Schema(description = "")
  public DeleteRuleEnum getDeleteRule() {
    return deleteRule;
  }

  public void setDeleteRule(DeleteRuleEnum deleteRule) {
    this.deleteRule = deleteRule;
  }

  public CreateDataFlowTaskRequest entryListFileInfo(EntryListFileInfoForCreateDataFlowTaskInput entryListFileInfo) {
    this.entryListFileInfo = entryListFileInfo;
    return this;
  }

   /**
   * Get entryListFileInfo
   * @return entryListFileInfo
  **/
  @Valid
  @Schema(description = "")
  public EntryListFileInfoForCreateDataFlowTaskInput getEntryListFileInfo() {
    return entryListFileInfo;
  }

  public void setEntryListFileInfo(EntryListFileInfoForCreateDataFlowTaskInput entryListFileInfo) {
    this.entryListFileInfo = entryListFileInfo;
  }

  public CreateDataFlowTaskRequest exportSymlinkPolicy(ExportSymlinkPolicyEnum exportSymlinkPolicy) {
    this.exportSymlinkPolicy = exportSymlinkPolicy;
    return this;
  }

   /**
   * Get exportSymlinkPolicy
   * @return exportSymlinkPolicy
  **/
  @Schema(description = "")
  public ExportSymlinkPolicyEnum getExportSymlinkPolicy() {
    return exportSymlinkPolicy;
  }

  public void setExportSymlinkPolicy(ExportSymlinkPolicyEnum exportSymlinkPolicy) {
    this.exportSymlinkPolicy = exportSymlinkPolicy;
  }

  public CreateDataFlowTaskRequest fileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
    return this;
  }

   /**
   * Get fileSystemId
   * @return fileSystemId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getFileSystemId() {
    return fileSystemId;
  }

  public void setFileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
  }

  public CreateDataFlowTaskRequest filesetId(String filesetId) {
    this.filesetId = filesetId;
    return this;
  }

   /**
   * Get filesetId
   * @return filesetId
  **/
  @Schema(description = "")
  public String getFilesetId() {
    return filesetId;
  }

  public void setFilesetId(String filesetId) {
    this.filesetId = filesetId;
  }

  public CreateDataFlowTaskRequest sameNameFilePolicy(SameNameFilePolicyEnum sameNameFilePolicy) {
    this.sameNameFilePolicy = sameNameFilePolicy;
    return this;
  }

   /**
   * Get sameNameFilePolicy
   * @return sameNameFilePolicy
  **/
  @Schema(description = "")
  public SameNameFilePolicyEnum getSameNameFilePolicy() {
    return sameNameFilePolicy;
  }

  public void setSameNameFilePolicy(SameNameFilePolicyEnum sameNameFilePolicy) {
    this.sameNameFilePolicy = sameNameFilePolicy;
  }

  public CreateDataFlowTaskRequest subPath(String subPath) {
    this.subPath = subPath;
    return this;
  }

   /**
   * Get subPath
   * @return subPath
  **/
  @Schema(description = "")
  public String getSubPath() {
    return subPath;
  }

  public void setSubPath(String subPath) {
    this.subPath = subPath;
  }

  public CreateDataFlowTaskRequest taskAction(TaskActionEnum taskAction) {
    this.taskAction = taskAction;
    return this;
  }

   /**
   * Get taskAction
   * @return taskAction
  **/
  @NotNull
  @Schema(required = true, description = "")
  public TaskActionEnum getTaskAction() {
    return taskAction;
  }

  public void setTaskAction(TaskActionEnum taskAction) {
    this.taskAction = taskAction;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDataFlowTaskRequest createDataFlowTaskRequest = (CreateDataFlowTaskRequest) o;
    return Objects.equals(this.dataStorage, createDataFlowTaskRequest.dataStorage) &&
        Objects.equals(this.dataStoragePath, createDataFlowTaskRequest.dataStoragePath) &&
        Objects.equals(this.dataType, createDataFlowTaskRequest.dataType) &&
        Objects.equals(this.deleteRule, createDataFlowTaskRequest.deleteRule) &&
        Objects.equals(this.entryListFileInfo, createDataFlowTaskRequest.entryListFileInfo) &&
        Objects.equals(this.exportSymlinkPolicy, createDataFlowTaskRequest.exportSymlinkPolicy) &&
        Objects.equals(this.fileSystemId, createDataFlowTaskRequest.fileSystemId) &&
        Objects.equals(this.filesetId, createDataFlowTaskRequest.filesetId) &&
        Objects.equals(this.sameNameFilePolicy, createDataFlowTaskRequest.sameNameFilePolicy) &&
        Objects.equals(this.subPath, createDataFlowTaskRequest.subPath) &&
        Objects.equals(this.taskAction, createDataFlowTaskRequest.taskAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataStorage, dataStoragePath, dataType, deleteRule, entryListFileInfo, exportSymlinkPolicy, fileSystemId, filesetId, sameNameFilePolicy, subPath, taskAction);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDataFlowTaskRequest {\n");
    
    sb.append("    dataStorage: ").append(toIndentedString(dataStorage)).append("\n");
    sb.append("    dataStoragePath: ").append(toIndentedString(dataStoragePath)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    deleteRule: ").append(toIndentedString(deleteRule)).append("\n");
    sb.append("    entryListFileInfo: ").append(toIndentedString(entryListFileInfo)).append("\n");
    sb.append("    exportSymlinkPolicy: ").append(toIndentedString(exportSymlinkPolicy)).append("\n");
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    filesetId: ").append(toIndentedString(filesetId)).append("\n");
    sb.append("    sameNameFilePolicy: ").append(toIndentedString(sameNameFilePolicy)).append("\n");
    sb.append("    subPath: ").append(toIndentedString(subPath)).append("\n");
    sb.append("    taskAction: ").append(toIndentedString(taskAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
