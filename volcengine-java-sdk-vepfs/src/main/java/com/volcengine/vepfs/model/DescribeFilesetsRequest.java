/*
 * vepfs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vepfs.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vepfs.model.FilterForDescribeFilesetsInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DescribeFilesetsRequest
 */



public class DescribeFilesetsRequest {
  @SerializedName("FileSystemId")
  private String fileSystemId = null;

  @SerializedName("Filters")
  private List<FilterForDescribeFilesetsInput> filters = null;

  /**
   * Gets or Sets orderBy
   */
  @JsonAdapter(OrderByEnum.Adapter.class)
  public enum OrderByEnum {
    @SerializedName("CreateTimeDesc")
    CREATETIMEDESC("CreateTimeDesc"),
    @SerializedName("CreateTimeAsc")
    CREATETIMEASC("CreateTimeAsc"),
    @SerializedName("NameDesc")
    NAMEDESC("NameDesc"),
    @SerializedName("NameAsc")
    NAMEASC("NameAsc");

    private String value;

    OrderByEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OrderByEnum fromValue(String input) {
      for (OrderByEnum b : OrderByEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OrderByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderByEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OrderByEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OrderByEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("OrderBy")
  private OrderByEnum orderBy = null;

  @SerializedName("PageNumber")
  private Integer pageNumber = null;

  @SerializedName("PageSize")
  private Integer pageSize = null;

  public DescribeFilesetsRequest fileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
    return this;
  }

   /**
   * Get fileSystemId
   * @return fileSystemId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getFileSystemId() {
    return fileSystemId;
  }

  public void setFileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
  }

  public DescribeFilesetsRequest filters(List<FilterForDescribeFilesetsInput> filters) {
    this.filters = filters;
    return this;
  }

  public DescribeFilesetsRequest addFiltersItem(FilterForDescribeFilesetsInput filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<FilterForDescribeFilesetsInput>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @Valid
  @Schema(description = "")
  public List<FilterForDescribeFilesetsInput> getFilters() {
    return filters;
  }

  public void setFilters(List<FilterForDescribeFilesetsInput> filters) {
    this.filters = filters;
  }

  public DescribeFilesetsRequest orderBy(OrderByEnum orderBy) {
    this.orderBy = orderBy;
    return this;
  }

   /**
   * Get orderBy
   * @return orderBy
  **/
  @Schema(description = "")
  public OrderByEnum getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(OrderByEnum orderBy) {
    this.orderBy = orderBy;
  }

  public DescribeFilesetsRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * @return pageNumber
  **/
  @Schema(description = "")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public DescribeFilesetsRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeFilesetsRequest describeFilesetsRequest = (DescribeFilesetsRequest) o;
    return Objects.equals(this.fileSystemId, describeFilesetsRequest.fileSystemId) &&
        Objects.equals(this.filters, describeFilesetsRequest.filters) &&
        Objects.equals(this.orderBy, describeFilesetsRequest.orderBy) &&
        Objects.equals(this.pageNumber, describeFilesetsRequest.pageNumber) &&
        Objects.equals(this.pageSize, describeFilesetsRequest.pageSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileSystemId, filters, orderBy, pageNumber, pageSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeFilesetsRequest {\n");
    
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
