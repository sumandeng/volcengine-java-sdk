/*
 * vepfs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vepfs.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vepfs.model.FilterForDescribeFileSystemsInput;
import com.volcengine.vepfs.model.TagFilterForDescribeFileSystemsInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DescribeFileSystemsRequest
 */



public class DescribeFileSystemsRequest {
  @SerializedName("FileSystemIds")
  private String fileSystemIds = null;

  @SerializedName("Filters")
  private List<FilterForDescribeFileSystemsInput> filters = null;

  /**
   * Gets or Sets languageCode
   */
  @JsonAdapter(LanguageCodeEnum.Adapter.class)
  public enum LanguageCodeEnum {
    @SerializedName("zh")
    ZH("zh"),
    @SerializedName("en")
    EN("en");

    private String value;

    LanguageCodeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LanguageCodeEnum fromValue(String input) {
      for (LanguageCodeEnum b : LanguageCodeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LanguageCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageCodeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public LanguageCodeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LanguageCodeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("LanguageCode")
  private LanguageCodeEnum languageCode = null;

  /**
   * Gets or Sets orderBy
   */
  @JsonAdapter(OrderByEnum.Adapter.class)
  public enum OrderByEnum {
    @SerializedName("CreateTimeDesc")
    CREATETIMEDESC("CreateTimeDesc"),
    @SerializedName("CreateTimeAsc")
    CREATETIMEASC("CreateTimeAsc"),
    @SerializedName("CapacityDesc")
    CAPACITYDESC("CapacityDesc"),
    @SerializedName("CapacityAsc")
    CAPACITYASC("CapacityAsc"),
    @SerializedName("IdDesc")
    IDDESC("IdDesc"),
    @SerializedName("IdAsc")
    IDASC("IdAsc"),
    @SerializedName("VersionNumberDesc")
    VERSIONNUMBERDESC("VersionNumberDesc"),
    @SerializedName("VersionNumberAsc")
    VERSIONNUMBERASC("VersionNumberAsc");

    private String value;

    OrderByEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OrderByEnum fromValue(String input) {
      for (OrderByEnum b : OrderByEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OrderByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderByEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OrderByEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OrderByEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("OrderBy")
  private OrderByEnum orderBy = null;

  @SerializedName("PageNumber")
  private Integer pageNumber = null;

  @SerializedName("PageSize")
  private Integer pageSize = null;

  @SerializedName("Project")
  private String project = null;

  @SerializedName("TagFilters")
  private List<TagFilterForDescribeFileSystemsInput> tagFilters = null;

  public DescribeFileSystemsRequest fileSystemIds(String fileSystemIds) {
    this.fileSystemIds = fileSystemIds;
    return this;
  }

   /**
   * Get fileSystemIds
   * @return fileSystemIds
  **/
  @Schema(description = "")
  public String getFileSystemIds() {
    return fileSystemIds;
  }

  public void setFileSystemIds(String fileSystemIds) {
    this.fileSystemIds = fileSystemIds;
  }

  public DescribeFileSystemsRequest filters(List<FilterForDescribeFileSystemsInput> filters) {
    this.filters = filters;
    return this;
  }

  public DescribeFileSystemsRequest addFiltersItem(FilterForDescribeFileSystemsInput filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<FilterForDescribeFileSystemsInput>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @Valid
  @Schema(description = "")
  public List<FilterForDescribeFileSystemsInput> getFilters() {
    return filters;
  }

  public void setFilters(List<FilterForDescribeFileSystemsInput> filters) {
    this.filters = filters;
  }

  public DescribeFileSystemsRequest languageCode(LanguageCodeEnum languageCode) {
    this.languageCode = languageCode;
    return this;
  }

   /**
   * Get languageCode
   * @return languageCode
  **/
  @Schema(description = "")
  public LanguageCodeEnum getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(LanguageCodeEnum languageCode) {
    this.languageCode = languageCode;
  }

  public DescribeFileSystemsRequest orderBy(OrderByEnum orderBy) {
    this.orderBy = orderBy;
    return this;
  }

   /**
   * Get orderBy
   * @return orderBy
  **/
  @Schema(description = "")
  public OrderByEnum getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(OrderByEnum orderBy) {
    this.orderBy = orderBy;
  }

  public DescribeFileSystemsRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * @return pageNumber
  **/
  @Schema(description = "")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public DescribeFileSystemsRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public DescribeFileSystemsRequest project(String project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @Schema(description = "")
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }

  public DescribeFileSystemsRequest tagFilters(List<TagFilterForDescribeFileSystemsInput> tagFilters) {
    this.tagFilters = tagFilters;
    return this;
  }

  public DescribeFileSystemsRequest addTagFiltersItem(TagFilterForDescribeFileSystemsInput tagFiltersItem) {
    if (this.tagFilters == null) {
      this.tagFilters = new ArrayList<TagFilterForDescribeFileSystemsInput>();
    }
    this.tagFilters.add(tagFiltersItem);
    return this;
  }

   /**
   * Get tagFilters
   * @return tagFilters
  **/
  @Valid
  @Schema(description = "")
  public List<TagFilterForDescribeFileSystemsInput> getTagFilters() {
    return tagFilters;
  }

  public void setTagFilters(List<TagFilterForDescribeFileSystemsInput> tagFilters) {
    this.tagFilters = tagFilters;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeFileSystemsRequest describeFileSystemsRequest = (DescribeFileSystemsRequest) o;
    return Objects.equals(this.fileSystemIds, describeFileSystemsRequest.fileSystemIds) &&
        Objects.equals(this.filters, describeFileSystemsRequest.filters) &&
        Objects.equals(this.languageCode, describeFileSystemsRequest.languageCode) &&
        Objects.equals(this.orderBy, describeFileSystemsRequest.orderBy) &&
        Objects.equals(this.pageNumber, describeFileSystemsRequest.pageNumber) &&
        Objects.equals(this.pageSize, describeFileSystemsRequest.pageSize) &&
        Objects.equals(this.project, describeFileSystemsRequest.project) &&
        Objects.equals(this.tagFilters, describeFileSystemsRequest.tagFilters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileSystemIds, filters, languageCode, orderBy, pageNumber, pageSize, project, tagFilters);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeFileSystemsRequest {\n");
    
    sb.append("    fileSystemIds: ").append(toIndentedString(fileSystemIds)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    tagFilters: ").append(toIndentedString(tagFilters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
