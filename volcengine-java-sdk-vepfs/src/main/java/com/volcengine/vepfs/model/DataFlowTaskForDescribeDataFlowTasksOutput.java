/*
 * vepfs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vepfs.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vepfs.model.EntryListFileInfoForDescribeDataFlowTasksOutput;
import com.volcengine.vepfs.model.ReportForDescribeDataFlowTasksOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DataFlowTaskForDescribeDataFlowTasksOutput
 */



public class DataFlowTaskForDescribeDataFlowTasksOutput {
  @SerializedName("CreateTime")
  private String createTime = null;

  @SerializedName("DataFlowTaskId")
  private String dataFlowTaskId = null;

  @SerializedName("DataStorage")
  private String dataStorage = null;

  @SerializedName("DataStoragePath")
  private String dataStoragePath = null;

  /**
   * Gets or Sets dataType
   */
  @JsonAdapter(DataTypeEnum.Adapter.class)
  public enum DataTypeEnum {
    @SerializedName("Metadata")
    METADATA("Metadata"),
    @SerializedName("MetaAndData")
    METAANDDATA("MetaAndData");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DataTypeEnum fromValue(String input) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DataTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DataTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("DataType")
  private DataTypeEnum dataType = null;

  @SerializedName("EndTime")
  private String endTime = null;

  @SerializedName("EntryListFileInfo")
  private EntryListFileInfoForDescribeDataFlowTasksOutput entryListFileInfo = null;

  @SerializedName("EntryListFileUrl")
  private String entryListFileUrl = null;

  @SerializedName("ExecCount")
  private String execCount = null;

  @SerializedName("ExecSize")
  private String execSize = null;

  /**
   * Gets or Sets exportSymlinkPolicy
   */
  @JsonAdapter(ExportSymlinkPolicyEnum.Adapter.class)
  public enum ExportSymlinkPolicyEnum {
    @SerializedName("Skip")
    SKIP("Skip"),
    @SerializedName("NormalFile")
    NORMALFILE("NormalFile");

    private String value;

    ExportSymlinkPolicyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ExportSymlinkPolicyEnum fromValue(String input) {
      for (ExportSymlinkPolicyEnum b : ExportSymlinkPolicyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ExportSymlinkPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExportSymlinkPolicyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ExportSymlinkPolicyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ExportSymlinkPolicyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ExportSymlinkPolicy")
  private ExportSymlinkPolicyEnum exportSymlinkPolicy = null;

  @SerializedName("FailedCount")
  private String failedCount = null;

  @SerializedName("FileSystemId")
  private String fileSystemId = null;

  @SerializedName("FilesetId")
  private String filesetId = null;

  @SerializedName("FilesetPath")
  private String filesetPath = null;

  @SerializedName("QueueCount")
  private String queueCount = null;

  @SerializedName("Reports")
  private List<ReportForDescribeDataFlowTasksOutput> reports = null;

  /**
   * Gets or Sets sameNameFilePolicy
   */
  @JsonAdapter(SameNameFilePolicyEnum.Adapter.class)
  public enum SameNameFilePolicyEnum {
    @SerializedName("Skip")
    SKIP("Skip"),
    @SerializedName("KeepLatest")
    KEEPLATEST("KeepLatest"),
    @SerializedName("OverWrite")
    OVERWRITE("OverWrite");

    private String value;

    SameNameFilePolicyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SameNameFilePolicyEnum fromValue(String input) {
      for (SameNameFilePolicyEnum b : SameNameFilePolicyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SameNameFilePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SameNameFilePolicyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SameNameFilePolicyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SameNameFilePolicyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("SameNameFilePolicy")
  private SameNameFilePolicyEnum sameNameFilePolicy = null;

  @SerializedName("StartTime")
  private String startTime = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("Creating")
    CREATING("Creating"),
    @SerializedName("Running")
    RUNNING("Running"),
    @SerializedName("Finished")
    FINISHED("Finished"),
    @SerializedName("Canceling")
    CANCELING("Canceling"),
    @SerializedName("Canceled")
    CANCELED("Canceled"),
    @SerializedName("Deleting")
    DELETING("Deleting"),
    @SerializedName("Error")
    ERROR("Error"),
    @SerializedName("Deleted")
    DELETED("Deleted");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Status")
  private StatusEnum status = null;

  @SerializedName("SubPath")
  private String subPath = null;

  /**
   * Gets or Sets taskAction
   */
  @JsonAdapter(TaskActionEnum.Adapter.class)
  public enum TaskActionEnum {
    @SerializedName("Import")
    IMPORT("Import"),
    @SerializedName("Export")
    EXPORT("Export"),
    @SerializedName("Inventory")
    INVENTORY("Inventory"),
    @SerializedName("Delete")
    DELETE("Delete");

    private String value;

    TaskActionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TaskActionEnum fromValue(String input) {
      for (TaskActionEnum b : TaskActionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TaskActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaskActionEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TaskActionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TaskActionEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("TaskAction")
  private TaskActionEnum taskAction = null;

  @SerializedName("TotalSize")
  private String totalSize = null;

  @SerializedName("UpdateTime")
  private String updateTime = null;

  public DataFlowTaskForDescribeDataFlowTasksOutput createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @Schema(description = "")
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput dataFlowTaskId(String dataFlowTaskId) {
    this.dataFlowTaskId = dataFlowTaskId;
    return this;
  }

   /**
   * Get dataFlowTaskId
   * @return dataFlowTaskId
  **/
  @Schema(description = "")
  public String getDataFlowTaskId() {
    return dataFlowTaskId;
  }

  public void setDataFlowTaskId(String dataFlowTaskId) {
    this.dataFlowTaskId = dataFlowTaskId;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput dataStorage(String dataStorage) {
    this.dataStorage = dataStorage;
    return this;
  }

   /**
   * Get dataStorage
   * @return dataStorage
  **/
  @Schema(description = "")
  public String getDataStorage() {
    return dataStorage;
  }

  public void setDataStorage(String dataStorage) {
    this.dataStorage = dataStorage;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput dataStoragePath(String dataStoragePath) {
    this.dataStoragePath = dataStoragePath;
    return this;
  }

   /**
   * Get dataStoragePath
   * @return dataStoragePath
  **/
  @Schema(description = "")
  public String getDataStoragePath() {
    return dataStoragePath;
  }

  public void setDataStoragePath(String dataStoragePath) {
    this.dataStoragePath = dataStoragePath;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput dataType(DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * Get dataType
   * @return dataType
  **/
  @Schema(description = "")
  public DataTypeEnum getDataType() {
    return dataType;
  }

  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @Schema(description = "")
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput entryListFileInfo(EntryListFileInfoForDescribeDataFlowTasksOutput entryListFileInfo) {
    this.entryListFileInfo = entryListFileInfo;
    return this;
  }

   /**
   * Get entryListFileInfo
   * @return entryListFileInfo
  **/
  @Valid
  @Schema(description = "")
  public EntryListFileInfoForDescribeDataFlowTasksOutput getEntryListFileInfo() {
    return entryListFileInfo;
  }

  public void setEntryListFileInfo(EntryListFileInfoForDescribeDataFlowTasksOutput entryListFileInfo) {
    this.entryListFileInfo = entryListFileInfo;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput entryListFileUrl(String entryListFileUrl) {
    this.entryListFileUrl = entryListFileUrl;
    return this;
  }

   /**
   * Get entryListFileUrl
   * @return entryListFileUrl
  **/
  @Schema(description = "")
  public String getEntryListFileUrl() {
    return entryListFileUrl;
  }

  public void setEntryListFileUrl(String entryListFileUrl) {
    this.entryListFileUrl = entryListFileUrl;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput execCount(String execCount) {
    this.execCount = execCount;
    return this;
  }

   /**
   * Get execCount
   * @return execCount
  **/
  @Schema(description = "")
  public String getExecCount() {
    return execCount;
  }

  public void setExecCount(String execCount) {
    this.execCount = execCount;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput execSize(String execSize) {
    this.execSize = execSize;
    return this;
  }

   /**
   * Get execSize
   * @return execSize
  **/
  @Schema(description = "")
  public String getExecSize() {
    return execSize;
  }

  public void setExecSize(String execSize) {
    this.execSize = execSize;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput exportSymlinkPolicy(ExportSymlinkPolicyEnum exportSymlinkPolicy) {
    this.exportSymlinkPolicy = exportSymlinkPolicy;
    return this;
  }

   /**
   * Get exportSymlinkPolicy
   * @return exportSymlinkPolicy
  **/
  @Schema(description = "")
  public ExportSymlinkPolicyEnum getExportSymlinkPolicy() {
    return exportSymlinkPolicy;
  }

  public void setExportSymlinkPolicy(ExportSymlinkPolicyEnum exportSymlinkPolicy) {
    this.exportSymlinkPolicy = exportSymlinkPolicy;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput failedCount(String failedCount) {
    this.failedCount = failedCount;
    return this;
  }

   /**
   * Get failedCount
   * @return failedCount
  **/
  @Schema(description = "")
  public String getFailedCount() {
    return failedCount;
  }

  public void setFailedCount(String failedCount) {
    this.failedCount = failedCount;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput fileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
    return this;
  }

   /**
   * Get fileSystemId
   * @return fileSystemId
  **/
  @Schema(description = "")
  public String getFileSystemId() {
    return fileSystemId;
  }

  public void setFileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput filesetId(String filesetId) {
    this.filesetId = filesetId;
    return this;
  }

   /**
   * Get filesetId
   * @return filesetId
  **/
  @Schema(description = "")
  public String getFilesetId() {
    return filesetId;
  }

  public void setFilesetId(String filesetId) {
    this.filesetId = filesetId;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput filesetPath(String filesetPath) {
    this.filesetPath = filesetPath;
    return this;
  }

   /**
   * Get filesetPath
   * @return filesetPath
  **/
  @Schema(description = "")
  public String getFilesetPath() {
    return filesetPath;
  }

  public void setFilesetPath(String filesetPath) {
    this.filesetPath = filesetPath;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput queueCount(String queueCount) {
    this.queueCount = queueCount;
    return this;
  }

   /**
   * Get queueCount
   * @return queueCount
  **/
  @Schema(description = "")
  public String getQueueCount() {
    return queueCount;
  }

  public void setQueueCount(String queueCount) {
    this.queueCount = queueCount;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput reports(List<ReportForDescribeDataFlowTasksOutput> reports) {
    this.reports = reports;
    return this;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput addReportsItem(ReportForDescribeDataFlowTasksOutput reportsItem) {
    if (this.reports == null) {
      this.reports = new ArrayList<ReportForDescribeDataFlowTasksOutput>();
    }
    this.reports.add(reportsItem);
    return this;
  }

   /**
   * Get reports
   * @return reports
  **/
  @Valid
  @Schema(description = "")
  public List<ReportForDescribeDataFlowTasksOutput> getReports() {
    return reports;
  }

  public void setReports(List<ReportForDescribeDataFlowTasksOutput> reports) {
    this.reports = reports;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput sameNameFilePolicy(SameNameFilePolicyEnum sameNameFilePolicy) {
    this.sameNameFilePolicy = sameNameFilePolicy;
    return this;
  }

   /**
   * Get sameNameFilePolicy
   * @return sameNameFilePolicy
  **/
  @Schema(description = "")
  public SameNameFilePolicyEnum getSameNameFilePolicy() {
    return sameNameFilePolicy;
  }

  public void setSameNameFilePolicy(SameNameFilePolicyEnum sameNameFilePolicy) {
    this.sameNameFilePolicy = sameNameFilePolicy;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @Schema(description = "")
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput subPath(String subPath) {
    this.subPath = subPath;
    return this;
  }

   /**
   * Get subPath
   * @return subPath
  **/
  @Schema(description = "")
  public String getSubPath() {
    return subPath;
  }

  public void setSubPath(String subPath) {
    this.subPath = subPath;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput taskAction(TaskActionEnum taskAction) {
    this.taskAction = taskAction;
    return this;
  }

   /**
   * Get taskAction
   * @return taskAction
  **/
  @Schema(description = "")
  public TaskActionEnum getTaskAction() {
    return taskAction;
  }

  public void setTaskAction(TaskActionEnum taskAction) {
    this.taskAction = taskAction;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput totalSize(String totalSize) {
    this.totalSize = totalSize;
    return this;
  }

   /**
   * Get totalSize
   * @return totalSize
  **/
  @Schema(description = "")
  public String getTotalSize() {
    return totalSize;
  }

  public void setTotalSize(String totalSize) {
    this.totalSize = totalSize;
  }

  public DataFlowTaskForDescribeDataFlowTasksOutput updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataFlowTaskForDescribeDataFlowTasksOutput dataFlowTaskForDescribeDataFlowTasksOutput = (DataFlowTaskForDescribeDataFlowTasksOutput) o;
    return Objects.equals(this.createTime, dataFlowTaskForDescribeDataFlowTasksOutput.createTime) &&
        Objects.equals(this.dataFlowTaskId, dataFlowTaskForDescribeDataFlowTasksOutput.dataFlowTaskId) &&
        Objects.equals(this.dataStorage, dataFlowTaskForDescribeDataFlowTasksOutput.dataStorage) &&
        Objects.equals(this.dataStoragePath, dataFlowTaskForDescribeDataFlowTasksOutput.dataStoragePath) &&
        Objects.equals(this.dataType, dataFlowTaskForDescribeDataFlowTasksOutput.dataType) &&
        Objects.equals(this.endTime, dataFlowTaskForDescribeDataFlowTasksOutput.endTime) &&
        Objects.equals(this.entryListFileInfo, dataFlowTaskForDescribeDataFlowTasksOutput.entryListFileInfo) &&
        Objects.equals(this.entryListFileUrl, dataFlowTaskForDescribeDataFlowTasksOutput.entryListFileUrl) &&
        Objects.equals(this.execCount, dataFlowTaskForDescribeDataFlowTasksOutput.execCount) &&
        Objects.equals(this.execSize, dataFlowTaskForDescribeDataFlowTasksOutput.execSize) &&
        Objects.equals(this.exportSymlinkPolicy, dataFlowTaskForDescribeDataFlowTasksOutput.exportSymlinkPolicy) &&
        Objects.equals(this.failedCount, dataFlowTaskForDescribeDataFlowTasksOutput.failedCount) &&
        Objects.equals(this.fileSystemId, dataFlowTaskForDescribeDataFlowTasksOutput.fileSystemId) &&
        Objects.equals(this.filesetId, dataFlowTaskForDescribeDataFlowTasksOutput.filesetId) &&
        Objects.equals(this.filesetPath, dataFlowTaskForDescribeDataFlowTasksOutput.filesetPath) &&
        Objects.equals(this.queueCount, dataFlowTaskForDescribeDataFlowTasksOutput.queueCount) &&
        Objects.equals(this.reports, dataFlowTaskForDescribeDataFlowTasksOutput.reports) &&
        Objects.equals(this.sameNameFilePolicy, dataFlowTaskForDescribeDataFlowTasksOutput.sameNameFilePolicy) &&
        Objects.equals(this.startTime, dataFlowTaskForDescribeDataFlowTasksOutput.startTime) &&
        Objects.equals(this.status, dataFlowTaskForDescribeDataFlowTasksOutput.status) &&
        Objects.equals(this.subPath, dataFlowTaskForDescribeDataFlowTasksOutput.subPath) &&
        Objects.equals(this.taskAction, dataFlowTaskForDescribeDataFlowTasksOutput.taskAction) &&
        Objects.equals(this.totalSize, dataFlowTaskForDescribeDataFlowTasksOutput.totalSize) &&
        Objects.equals(this.updateTime, dataFlowTaskForDescribeDataFlowTasksOutput.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, dataFlowTaskId, dataStorage, dataStoragePath, dataType, endTime, entryListFileInfo, entryListFileUrl, execCount, execSize, exportSymlinkPolicy, failedCount, fileSystemId, filesetId, filesetPath, queueCount, reports, sameNameFilePolicy, startTime, status, subPath, taskAction, totalSize, updateTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataFlowTaskForDescribeDataFlowTasksOutput {\n");
    
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    dataFlowTaskId: ").append(toIndentedString(dataFlowTaskId)).append("\n");
    sb.append("    dataStorage: ").append(toIndentedString(dataStorage)).append("\n");
    sb.append("    dataStoragePath: ").append(toIndentedString(dataStoragePath)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    entryListFileInfo: ").append(toIndentedString(entryListFileInfo)).append("\n");
    sb.append("    entryListFileUrl: ").append(toIndentedString(entryListFileUrl)).append("\n");
    sb.append("    execCount: ").append(toIndentedString(execCount)).append("\n");
    sb.append("    execSize: ").append(toIndentedString(execSize)).append("\n");
    sb.append("    exportSymlinkPolicy: ").append(toIndentedString(exportSymlinkPolicy)).append("\n");
    sb.append("    failedCount: ").append(toIndentedString(failedCount)).append("\n");
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    filesetId: ").append(toIndentedString(filesetId)).append("\n");
    sb.append("    filesetPath: ").append(toIndentedString(filesetPath)).append("\n");
    sb.append("    queueCount: ").append(toIndentedString(queueCount)).append("\n");
    sb.append("    reports: ").append(toIndentedString(reports)).append("\n");
    sb.append("    sameNameFilePolicy: ").append(toIndentedString(sameNameFilePolicy)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subPath: ").append(toIndentedString(subPath)).append("\n");
    sb.append("    taskAction: ").append(toIndentedString(taskAction)).append("\n");
    sb.append("    totalSize: ").append(toIndentedString(totalSize)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
