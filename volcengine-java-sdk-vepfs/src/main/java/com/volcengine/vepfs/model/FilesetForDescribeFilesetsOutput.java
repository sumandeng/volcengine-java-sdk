/*
 * vepfs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vepfs.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * FilesetForDescribeFilesetsOutput
 */



public class FilesetForDescribeFilesetsOutput {
  @SerializedName("BandwidthQos")
  private Integer bandwidthQos = null;

  @SerializedName("CapacityLimit")
  private Integer capacityLimit = null;

  @SerializedName("CapacityUsed")
  private Integer capacityUsed = null;

  @SerializedName("CreateTime")
  private String createTime = null;

  @SerializedName("FileLimit")
  private Long fileLimit = null;

  @SerializedName("FileSystemId")
  private String fileSystemId = null;

  @SerializedName("FileUsed")
  private Long fileUsed = null;

  @SerializedName("FilesetId")
  private String filesetId = null;

  @SerializedName("FilesetName")
  private String filesetName = null;

  @SerializedName("FilesetPath")
  private String filesetPath = null;

  @SerializedName("IOPSQos")
  private Integer ioPSQos = null;

  @SerializedName("MaxInodeNum")
  private Long maxInodeNum = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("Creating")
    CREATING("Creating"),
    @SerializedName("CreateError")
    CREATEERROR("CreateError"),
    @SerializedName("Running")
    RUNNING("Running"),
    @SerializedName("Updating")
    UPDATING("Updating"),
    @SerializedName("UpdateError")
    UPDATEERROR("UpdateError"),
    @SerializedName("Deleting")
    DELETING("Deleting"),
    @SerializedName("DeleteError")
    DELETEERROR("DeleteError"),
    @SerializedName("Deleted")
    DELETED("Deleted"),
    @SerializedName("Error")
    ERROR("Error");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Status")
  private StatusEnum status = null;

  public FilesetForDescribeFilesetsOutput bandwidthQos(Integer bandwidthQos) {
    this.bandwidthQos = bandwidthQos;
    return this;
  }

   /**
   * Get bandwidthQos
   * @return bandwidthQos
  **/
  @Schema(description = "")
  public Integer getBandwidthQos() {
    return bandwidthQos;
  }

  public void setBandwidthQos(Integer bandwidthQos) {
    this.bandwidthQos = bandwidthQos;
  }

  public FilesetForDescribeFilesetsOutput capacityLimit(Integer capacityLimit) {
    this.capacityLimit = capacityLimit;
    return this;
  }

   /**
   * Get capacityLimit
   * @return capacityLimit
  **/
  @Schema(description = "")
  public Integer getCapacityLimit() {
    return capacityLimit;
  }

  public void setCapacityLimit(Integer capacityLimit) {
    this.capacityLimit = capacityLimit;
  }

  public FilesetForDescribeFilesetsOutput capacityUsed(Integer capacityUsed) {
    this.capacityUsed = capacityUsed;
    return this;
  }

   /**
   * Get capacityUsed
   * @return capacityUsed
  **/
  @Schema(description = "")
  public Integer getCapacityUsed() {
    return capacityUsed;
  }

  public void setCapacityUsed(Integer capacityUsed) {
    this.capacityUsed = capacityUsed;
  }

  public FilesetForDescribeFilesetsOutput createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @Schema(description = "")
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }

  public FilesetForDescribeFilesetsOutput fileLimit(Long fileLimit) {
    this.fileLimit = fileLimit;
    return this;
  }

   /**
   * Get fileLimit
   * @return fileLimit
  **/
  @Schema(description = "")
  public Long getFileLimit() {
    return fileLimit;
  }

  public void setFileLimit(Long fileLimit) {
    this.fileLimit = fileLimit;
  }

  public FilesetForDescribeFilesetsOutput fileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
    return this;
  }

   /**
   * Get fileSystemId
   * @return fileSystemId
  **/
  @Schema(description = "")
  public String getFileSystemId() {
    return fileSystemId;
  }

  public void setFileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
  }

  public FilesetForDescribeFilesetsOutput fileUsed(Long fileUsed) {
    this.fileUsed = fileUsed;
    return this;
  }

   /**
   * Get fileUsed
   * @return fileUsed
  **/
  @Schema(description = "")
  public Long getFileUsed() {
    return fileUsed;
  }

  public void setFileUsed(Long fileUsed) {
    this.fileUsed = fileUsed;
  }

  public FilesetForDescribeFilesetsOutput filesetId(String filesetId) {
    this.filesetId = filesetId;
    return this;
  }

   /**
   * Get filesetId
   * @return filesetId
  **/
  @Schema(description = "")
  public String getFilesetId() {
    return filesetId;
  }

  public void setFilesetId(String filesetId) {
    this.filesetId = filesetId;
  }

  public FilesetForDescribeFilesetsOutput filesetName(String filesetName) {
    this.filesetName = filesetName;
    return this;
  }

   /**
   * Get filesetName
   * @return filesetName
  **/
  @Schema(description = "")
  public String getFilesetName() {
    return filesetName;
  }

  public void setFilesetName(String filesetName) {
    this.filesetName = filesetName;
  }

  public FilesetForDescribeFilesetsOutput filesetPath(String filesetPath) {
    this.filesetPath = filesetPath;
    return this;
  }

   /**
   * Get filesetPath
   * @return filesetPath
  **/
  @Schema(description = "")
  public String getFilesetPath() {
    return filesetPath;
  }

  public void setFilesetPath(String filesetPath) {
    this.filesetPath = filesetPath;
  }

  public FilesetForDescribeFilesetsOutput ioPSQos(Integer ioPSQos) {
    this.ioPSQos = ioPSQos;
    return this;
  }

   /**
   * Get ioPSQos
   * @return ioPSQos
  **/
  @Schema(description = "")
  public Integer getIoPSQos() {
    return ioPSQos;
  }

  public void setIoPSQos(Integer ioPSQos) {
    this.ioPSQos = ioPSQos;
  }

  public FilesetForDescribeFilesetsOutput maxInodeNum(Long maxInodeNum) {
    this.maxInodeNum = maxInodeNum;
    return this;
  }

   /**
   * Get maxInodeNum
   * @return maxInodeNum
  **/
  @Schema(description = "")
  public Long getMaxInodeNum() {
    return maxInodeNum;
  }

  public void setMaxInodeNum(Long maxInodeNum) {
    this.maxInodeNum = maxInodeNum;
  }

  public FilesetForDescribeFilesetsOutput status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilesetForDescribeFilesetsOutput filesetForDescribeFilesetsOutput = (FilesetForDescribeFilesetsOutput) o;
    return Objects.equals(this.bandwidthQos, filesetForDescribeFilesetsOutput.bandwidthQos) &&
        Objects.equals(this.capacityLimit, filesetForDescribeFilesetsOutput.capacityLimit) &&
        Objects.equals(this.capacityUsed, filesetForDescribeFilesetsOutput.capacityUsed) &&
        Objects.equals(this.createTime, filesetForDescribeFilesetsOutput.createTime) &&
        Objects.equals(this.fileLimit, filesetForDescribeFilesetsOutput.fileLimit) &&
        Objects.equals(this.fileSystemId, filesetForDescribeFilesetsOutput.fileSystemId) &&
        Objects.equals(this.fileUsed, filesetForDescribeFilesetsOutput.fileUsed) &&
        Objects.equals(this.filesetId, filesetForDescribeFilesetsOutput.filesetId) &&
        Objects.equals(this.filesetName, filesetForDescribeFilesetsOutput.filesetName) &&
        Objects.equals(this.filesetPath, filesetForDescribeFilesetsOutput.filesetPath) &&
        Objects.equals(this.ioPSQos, filesetForDescribeFilesetsOutput.ioPSQos) &&
        Objects.equals(this.maxInodeNum, filesetForDescribeFilesetsOutput.maxInodeNum) &&
        Objects.equals(this.status, filesetForDescribeFilesetsOutput.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidthQos, capacityLimit, capacityUsed, createTime, fileLimit, fileSystemId, fileUsed, filesetId, filesetName, filesetPath, ioPSQos, maxInodeNum, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilesetForDescribeFilesetsOutput {\n");
    
    sb.append("    bandwidthQos: ").append(toIndentedString(bandwidthQos)).append("\n");
    sb.append("    capacityLimit: ").append(toIndentedString(capacityLimit)).append("\n");
    sb.append("    capacityUsed: ").append(toIndentedString(capacityUsed)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    fileLimit: ").append(toIndentedString(fileLimit)).append("\n");
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    fileUsed: ").append(toIndentedString(fileUsed)).append("\n");
    sb.append("    filesetId: ").append(toIndentedString(filesetId)).append("\n");
    sb.append("    filesetName: ").append(toIndentedString(filesetName)).append("\n");
    sb.append("    filesetPath: ").append(toIndentedString(filesetPath)).append("\n");
    sb.append("    ioPSQos: ").append(toIndentedString(ioPSQos)).append("\n");
    sb.append("    maxInodeNum: ").append(toIndentedString(maxInodeNum)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
