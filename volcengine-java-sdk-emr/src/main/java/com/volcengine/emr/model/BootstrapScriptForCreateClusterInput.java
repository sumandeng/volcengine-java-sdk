/*
 * emr
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.emr.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.emr.model.EffectiveScopeForCreateClusterInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * BootstrapScriptForCreateClusterInput
 */



public class BootstrapScriptForCreateClusterInput {
  @SerializedName("EffectiveScope")
  private EffectiveScopeForCreateClusterInput effectiveScope = null;

  /**
   * Gets or Sets executionFailStrategy
   */
  @JsonAdapter(ExecutionFailStrategyEnum.Adapter.class)
  public enum ExecutionFailStrategyEnum {
    @SerializedName("FAILED_CONTINUE")
    FAILED_CONTINUE("FAILED_CONTINUE"),
    @SerializedName("FAILED_BLOCK")
    FAILED_BLOCK("FAILED_BLOCK");

    private String value;

    ExecutionFailStrategyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ExecutionFailStrategyEnum fromValue(String input) {
      for (ExecutionFailStrategyEnum b : ExecutionFailStrategyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ExecutionFailStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecutionFailStrategyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ExecutionFailStrategyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ExecutionFailStrategyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ExecutionFailStrategy")
  private ExecutionFailStrategyEnum executionFailStrategy = null;

  /**
   * Gets or Sets executionMoment
   */
  @JsonAdapter(ExecutionMomentEnum.Adapter.class)
  public enum ExecutionMomentEnum {
    @SerializedName("BEFORE_APPLICATION_INSTALL")
    BEFORE_APPLICATION_INSTALL("BEFORE_APPLICATION_INSTALL"),
    @SerializedName("AFTER_APPLICATION_STARTED")
    AFTER_APPLICATION_STARTED("AFTER_APPLICATION_STARTED");

    private String value;

    ExecutionMomentEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ExecutionMomentEnum fromValue(String input) {
      for (ExecutionMomentEnum b : ExecutionMomentEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ExecutionMomentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecutionMomentEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ExecutionMomentEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ExecutionMomentEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ExecutionMoment")
  private ExecutionMomentEnum executionMoment = null;

  @SerializedName("Priority")
  private String priority = null;

  @SerializedName("ScriptArgs")
  private String scriptArgs = null;

  @SerializedName("ScriptName")
  private String scriptName = null;

  @SerializedName("ScriptPath")
  private String scriptPath = null;

  /**
   * Gets or Sets scriptType
   */
  @JsonAdapter(ScriptTypeEnum.Adapter.class)
  public enum ScriptTypeEnum {
    @SerializedName("NORMAL")
    NORMAL("NORMAL"),
    @SerializedName("BOOTSTRAP")
    BOOTSTRAP("BOOTSTRAP");

    private String value;

    ScriptTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ScriptTypeEnum fromValue(String input) {
      for (ScriptTypeEnum b : ScriptTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ScriptTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScriptTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ScriptTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ScriptTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ScriptType")
  private ScriptTypeEnum scriptType = null;

  public BootstrapScriptForCreateClusterInput effectiveScope(EffectiveScopeForCreateClusterInput effectiveScope) {
    this.effectiveScope = effectiveScope;
    return this;
  }

   /**
   * Get effectiveScope
   * @return effectiveScope
  **/
  @Valid
  @Schema(description = "")
  public EffectiveScopeForCreateClusterInput getEffectiveScope() {
    return effectiveScope;
  }

  public void setEffectiveScope(EffectiveScopeForCreateClusterInput effectiveScope) {
    this.effectiveScope = effectiveScope;
  }

  public BootstrapScriptForCreateClusterInput executionFailStrategy(ExecutionFailStrategyEnum executionFailStrategy) {
    this.executionFailStrategy = executionFailStrategy;
    return this;
  }

   /**
   * Get executionFailStrategy
   * @return executionFailStrategy
  **/
  @Schema(description = "")
  public ExecutionFailStrategyEnum getExecutionFailStrategy() {
    return executionFailStrategy;
  }

  public void setExecutionFailStrategy(ExecutionFailStrategyEnum executionFailStrategy) {
    this.executionFailStrategy = executionFailStrategy;
  }

  public BootstrapScriptForCreateClusterInput executionMoment(ExecutionMomentEnum executionMoment) {
    this.executionMoment = executionMoment;
    return this;
  }

   /**
   * Get executionMoment
   * @return executionMoment
  **/
  @Schema(description = "")
  public ExecutionMomentEnum getExecutionMoment() {
    return executionMoment;
  }

  public void setExecutionMoment(ExecutionMomentEnum executionMoment) {
    this.executionMoment = executionMoment;
  }

  public BootstrapScriptForCreateClusterInput priority(String priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
 @Size(min=1,max=1000)  @Schema(description = "")
  public String getPriority() {
    return priority;
  }

  public void setPriority(String priority) {
    this.priority = priority;
  }

  public BootstrapScriptForCreateClusterInput scriptArgs(String scriptArgs) {
    this.scriptArgs = scriptArgs;
    return this;
  }

   /**
   * Get scriptArgs
   * @return scriptArgs
  **/
  @Schema(description = "")
  public String getScriptArgs() {
    return scriptArgs;
  }

  public void setScriptArgs(String scriptArgs) {
    this.scriptArgs = scriptArgs;
  }

  public BootstrapScriptForCreateClusterInput scriptName(String scriptName) {
    this.scriptName = scriptName;
    return this;
  }

   /**
   * Get scriptName
   * @return scriptName
  **/
  @Schema(description = "")
  public String getScriptName() {
    return scriptName;
  }

  public void setScriptName(String scriptName) {
    this.scriptName = scriptName;
  }

  public BootstrapScriptForCreateClusterInput scriptPath(String scriptPath) {
    this.scriptPath = scriptPath;
    return this;
  }

   /**
   * Get scriptPath
   * @return scriptPath
  **/
  @Schema(description = "")
  public String getScriptPath() {
    return scriptPath;
  }

  public void setScriptPath(String scriptPath) {
    this.scriptPath = scriptPath;
  }

  public BootstrapScriptForCreateClusterInput scriptType(ScriptTypeEnum scriptType) {
    this.scriptType = scriptType;
    return this;
  }

   /**
   * Get scriptType
   * @return scriptType
  **/
  @Schema(description = "")
  public ScriptTypeEnum getScriptType() {
    return scriptType;
  }

  public void setScriptType(ScriptTypeEnum scriptType) {
    this.scriptType = scriptType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BootstrapScriptForCreateClusterInput bootstrapScriptForCreateClusterInput = (BootstrapScriptForCreateClusterInput) o;
    return Objects.equals(this.effectiveScope, bootstrapScriptForCreateClusterInput.effectiveScope) &&
        Objects.equals(this.executionFailStrategy, bootstrapScriptForCreateClusterInput.executionFailStrategy) &&
        Objects.equals(this.executionMoment, bootstrapScriptForCreateClusterInput.executionMoment) &&
        Objects.equals(this.priority, bootstrapScriptForCreateClusterInput.priority) &&
        Objects.equals(this.scriptArgs, bootstrapScriptForCreateClusterInput.scriptArgs) &&
        Objects.equals(this.scriptName, bootstrapScriptForCreateClusterInput.scriptName) &&
        Objects.equals(this.scriptPath, bootstrapScriptForCreateClusterInput.scriptPath) &&
        Objects.equals(this.scriptType, bootstrapScriptForCreateClusterInput.scriptType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveScope, executionFailStrategy, executionMoment, priority, scriptArgs, scriptName, scriptPath, scriptType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BootstrapScriptForCreateClusterInput {\n");
    
    sb.append("    effectiveScope: ").append(toIndentedString(effectiveScope)).append("\n");
    sb.append("    executionFailStrategy: ").append(toIndentedString(executionFailStrategy)).append("\n");
    sb.append("    executionMoment: ").append(toIndentedString(executionMoment)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    scriptArgs: ").append(toIndentedString(scriptArgs)).append("\n");
    sb.append("    scriptName: ").append(toIndentedString(scriptName)).append("\n");
    sb.append("    scriptPath: ").append(toIndentedString(scriptPath)).append("\n");
    sb.append("    scriptType: ").append(toIndentedString(scriptType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
