/*
 * seccenter20240508
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.seccenter20240508.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.seccenter20240508.model.ScanForListRegistryImagesOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DataForListRegistryImagesOutput
 */



public class DataForListRegistryImagesOutput {
  @SerializedName("Digest")
  private String digest = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("ImageID")
  private String imageID = null;

  @SerializedName("Namespace")
  private String namespace = null;

  @SerializedName("PushTime")
  private Integer pushTime = null;

  @SerializedName("Region")
  private String region = null;

  @SerializedName("RegistryName")
  private String registryName = null;

  @SerializedName("RegistryType")
  private String registryType = null;

  @SerializedName("Repo")
  private String repo = null;

  @SerializedName("Scan")
  private ScanForListRegistryImagesOutput scan = null;

  @SerializedName("ScanID")
  private String scanID = null;

  @SerializedName("ScanStatus")
  private String scanStatus = null;

  @SerializedName("ScanTime")
  private Integer scanTime = null;

  @SerializedName("Size")
  private Integer size = null;

  @SerializedName("Tag")
  private String tag = null;

  public DataForListRegistryImagesOutput digest(String digest) {
    this.digest = digest;
    return this;
  }

   /**
   * Get digest
   * @return digest
  **/
  @Schema(description = "")
  public String getDigest() {
    return digest;
  }

  public void setDigest(String digest) {
    this.digest = digest;
  }

  public DataForListRegistryImagesOutput ID(String ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @Schema(description = "")
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }

  public DataForListRegistryImagesOutput imageID(String imageID) {
    this.imageID = imageID;
    return this;
  }

   /**
   * Get imageID
   * @return imageID
  **/
  @Schema(description = "")
  public String getImageID() {
    return imageID;
  }

  public void setImageID(String imageID) {
    this.imageID = imageID;
  }

  public DataForListRegistryImagesOutput namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

   /**
   * Get namespace
   * @return namespace
  **/
  @Schema(description = "")
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }

  public DataForListRegistryImagesOutput pushTime(Integer pushTime) {
    this.pushTime = pushTime;
    return this;
  }

   /**
   * Get pushTime
   * @return pushTime
  **/
  @Schema(description = "")
  public Integer getPushTime() {
    return pushTime;
  }

  public void setPushTime(Integer pushTime) {
    this.pushTime = pushTime;
  }

  public DataForListRegistryImagesOutput region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @Schema(description = "")
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }

  public DataForListRegistryImagesOutput registryName(String registryName) {
    this.registryName = registryName;
    return this;
  }

   /**
   * Get registryName
   * @return registryName
  **/
  @Schema(description = "")
  public String getRegistryName() {
    return registryName;
  }

  public void setRegistryName(String registryName) {
    this.registryName = registryName;
  }

  public DataForListRegistryImagesOutput registryType(String registryType) {
    this.registryType = registryType;
    return this;
  }

   /**
   * Get registryType
   * @return registryType
  **/
  @Schema(description = "")
  public String getRegistryType() {
    return registryType;
  }

  public void setRegistryType(String registryType) {
    this.registryType = registryType;
  }

  public DataForListRegistryImagesOutput repo(String repo) {
    this.repo = repo;
    return this;
  }

   /**
   * Get repo
   * @return repo
  **/
  @Schema(description = "")
  public String getRepo() {
    return repo;
  }

  public void setRepo(String repo) {
    this.repo = repo;
  }

  public DataForListRegistryImagesOutput scan(ScanForListRegistryImagesOutput scan) {
    this.scan = scan;
    return this;
  }

   /**
   * Get scan
   * @return scan
  **/
  @Valid
  @Schema(description = "")
  public ScanForListRegistryImagesOutput getScan() {
    return scan;
  }

  public void setScan(ScanForListRegistryImagesOutput scan) {
    this.scan = scan;
  }

  public DataForListRegistryImagesOutput scanID(String scanID) {
    this.scanID = scanID;
    return this;
  }

   /**
   * Get scanID
   * @return scanID
  **/
  @Schema(description = "")
  public String getScanID() {
    return scanID;
  }

  public void setScanID(String scanID) {
    this.scanID = scanID;
  }

  public DataForListRegistryImagesOutput scanStatus(String scanStatus) {
    this.scanStatus = scanStatus;
    return this;
  }

   /**
   * Get scanStatus
   * @return scanStatus
  **/
  @Schema(description = "")
  public String getScanStatus() {
    return scanStatus;
  }

  public void setScanStatus(String scanStatus) {
    this.scanStatus = scanStatus;
  }

  public DataForListRegistryImagesOutput scanTime(Integer scanTime) {
    this.scanTime = scanTime;
    return this;
  }

   /**
   * Get scanTime
   * @return scanTime
  **/
  @Schema(description = "")
  public Integer getScanTime() {
    return scanTime;
  }

  public void setScanTime(Integer scanTime) {
    this.scanTime = scanTime;
  }

  public DataForListRegistryImagesOutput size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @Schema(description = "")
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }

  public DataForListRegistryImagesOutput tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  @Schema(description = "")
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataForListRegistryImagesOutput dataForListRegistryImagesOutput = (DataForListRegistryImagesOutput) o;
    return Objects.equals(this.digest, dataForListRegistryImagesOutput.digest) &&
        Objects.equals(this.ID, dataForListRegistryImagesOutput.ID) &&
        Objects.equals(this.imageID, dataForListRegistryImagesOutput.imageID) &&
        Objects.equals(this.namespace, dataForListRegistryImagesOutput.namespace) &&
        Objects.equals(this.pushTime, dataForListRegistryImagesOutput.pushTime) &&
        Objects.equals(this.region, dataForListRegistryImagesOutput.region) &&
        Objects.equals(this.registryName, dataForListRegistryImagesOutput.registryName) &&
        Objects.equals(this.registryType, dataForListRegistryImagesOutput.registryType) &&
        Objects.equals(this.repo, dataForListRegistryImagesOutput.repo) &&
        Objects.equals(this.scan, dataForListRegistryImagesOutput.scan) &&
        Objects.equals(this.scanID, dataForListRegistryImagesOutput.scanID) &&
        Objects.equals(this.scanStatus, dataForListRegistryImagesOutput.scanStatus) &&
        Objects.equals(this.scanTime, dataForListRegistryImagesOutput.scanTime) &&
        Objects.equals(this.size, dataForListRegistryImagesOutput.size) &&
        Objects.equals(this.tag, dataForListRegistryImagesOutput.tag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(digest, ID, imageID, namespace, pushTime, region, registryName, registryType, repo, scan, scanID, scanStatus, scanTime, size, tag);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataForListRegistryImagesOutput {\n");
    
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    imageID: ").append(toIndentedString(imageID)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    pushTime: ").append(toIndentedString(pushTime)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    registryName: ").append(toIndentedString(registryName)).append("\n");
    sb.append("    registryType: ").append(toIndentedString(registryType)).append("\n");
    sb.append("    repo: ").append(toIndentedString(repo)).append("\n");
    sb.append("    scan: ").append(toIndentedString(scan)).append("\n");
    sb.append("    scanID: ").append(toIndentedString(scanID)).append("\n");
    sb.append("    scanStatus: ").append(toIndentedString(scanStatus)).append("\n");
    sb.append("    scanTime: ").append(toIndentedString(scanTime)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
