/*
 * seccenter20240508
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.seccenter20240508.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * GetRaspProtectStatisticsResponse
 */



public class GetRaspProtectStatisticsResponse extends com.volcengine.model.AbstractResponse {
  @SerializedName("HitWhiteProcessCount")
  private Integer hitWhiteProcessCount = null;

  @SerializedName("ProcessCount")
  private Integer processCount = null;

  @SerializedName("ProtectAbnormalProcessCount")
  private Integer protectAbnormalProcessCount = null;

  @SerializedName("ProtectedProcessCount")
  private Integer protectedProcessCount = null;

  @SerializedName("RaspCloseCount")
  private Integer raspCloseCount = null;

  @SerializedName("RaspOpenCount")
  private Integer raspOpenCount = null;

  @SerializedName("RaspOpenFailCount")
  private Integer raspOpenFailCount = null;

  @SerializedName("ToBeProtectedProcessCount")
  private Integer toBeProtectedProcessCount = null;

  public GetRaspProtectStatisticsResponse hitWhiteProcessCount(Integer hitWhiteProcessCount) {
    this.hitWhiteProcessCount = hitWhiteProcessCount;
    return this;
  }

   /**
   * Get hitWhiteProcessCount
   * @return hitWhiteProcessCount
  **/
  @Schema(description = "")
  public Integer getHitWhiteProcessCount() {
    return hitWhiteProcessCount;
  }

  public void setHitWhiteProcessCount(Integer hitWhiteProcessCount) {
    this.hitWhiteProcessCount = hitWhiteProcessCount;
  }

  public GetRaspProtectStatisticsResponse processCount(Integer processCount) {
    this.processCount = processCount;
    return this;
  }

   /**
   * Get processCount
   * @return processCount
  **/
  @Schema(description = "")
  public Integer getProcessCount() {
    return processCount;
  }

  public void setProcessCount(Integer processCount) {
    this.processCount = processCount;
  }

  public GetRaspProtectStatisticsResponse protectAbnormalProcessCount(Integer protectAbnormalProcessCount) {
    this.protectAbnormalProcessCount = protectAbnormalProcessCount;
    return this;
  }

   /**
   * Get protectAbnormalProcessCount
   * @return protectAbnormalProcessCount
  **/
  @Schema(description = "")
  public Integer getProtectAbnormalProcessCount() {
    return protectAbnormalProcessCount;
  }

  public void setProtectAbnormalProcessCount(Integer protectAbnormalProcessCount) {
    this.protectAbnormalProcessCount = protectAbnormalProcessCount;
  }

  public GetRaspProtectStatisticsResponse protectedProcessCount(Integer protectedProcessCount) {
    this.protectedProcessCount = protectedProcessCount;
    return this;
  }

   /**
   * Get protectedProcessCount
   * @return protectedProcessCount
  **/
  @Schema(description = "")
  public Integer getProtectedProcessCount() {
    return protectedProcessCount;
  }

  public void setProtectedProcessCount(Integer protectedProcessCount) {
    this.protectedProcessCount = protectedProcessCount;
  }

  public GetRaspProtectStatisticsResponse raspCloseCount(Integer raspCloseCount) {
    this.raspCloseCount = raspCloseCount;
    return this;
  }

   /**
   * Get raspCloseCount
   * @return raspCloseCount
  **/
  @Schema(description = "")
  public Integer getRaspCloseCount() {
    return raspCloseCount;
  }

  public void setRaspCloseCount(Integer raspCloseCount) {
    this.raspCloseCount = raspCloseCount;
  }

  public GetRaspProtectStatisticsResponse raspOpenCount(Integer raspOpenCount) {
    this.raspOpenCount = raspOpenCount;
    return this;
  }

   /**
   * Get raspOpenCount
   * @return raspOpenCount
  **/
  @Schema(description = "")
  public Integer getRaspOpenCount() {
    return raspOpenCount;
  }

  public void setRaspOpenCount(Integer raspOpenCount) {
    this.raspOpenCount = raspOpenCount;
  }

  public GetRaspProtectStatisticsResponse raspOpenFailCount(Integer raspOpenFailCount) {
    this.raspOpenFailCount = raspOpenFailCount;
    return this;
  }

   /**
   * Get raspOpenFailCount
   * @return raspOpenFailCount
  **/
  @Schema(description = "")
  public Integer getRaspOpenFailCount() {
    return raspOpenFailCount;
  }

  public void setRaspOpenFailCount(Integer raspOpenFailCount) {
    this.raspOpenFailCount = raspOpenFailCount;
  }

  public GetRaspProtectStatisticsResponse toBeProtectedProcessCount(Integer toBeProtectedProcessCount) {
    this.toBeProtectedProcessCount = toBeProtectedProcessCount;
    return this;
  }

   /**
   * Get toBeProtectedProcessCount
   * @return toBeProtectedProcessCount
  **/
  @Schema(description = "")
  public Integer getToBeProtectedProcessCount() {
    return toBeProtectedProcessCount;
  }

  public void setToBeProtectedProcessCount(Integer toBeProtectedProcessCount) {
    this.toBeProtectedProcessCount = toBeProtectedProcessCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRaspProtectStatisticsResponse getRaspProtectStatisticsResponse = (GetRaspProtectStatisticsResponse) o;
    return Objects.equals(this.hitWhiteProcessCount, getRaspProtectStatisticsResponse.hitWhiteProcessCount) &&
        Objects.equals(this.processCount, getRaspProtectStatisticsResponse.processCount) &&
        Objects.equals(this.protectAbnormalProcessCount, getRaspProtectStatisticsResponse.protectAbnormalProcessCount) &&
        Objects.equals(this.protectedProcessCount, getRaspProtectStatisticsResponse.protectedProcessCount) &&
        Objects.equals(this.raspCloseCount, getRaspProtectStatisticsResponse.raspCloseCount) &&
        Objects.equals(this.raspOpenCount, getRaspProtectStatisticsResponse.raspOpenCount) &&
        Objects.equals(this.raspOpenFailCount, getRaspProtectStatisticsResponse.raspOpenFailCount) &&
        Objects.equals(this.toBeProtectedProcessCount, getRaspProtectStatisticsResponse.toBeProtectedProcessCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hitWhiteProcessCount, processCount, protectAbnormalProcessCount, protectedProcessCount, raspCloseCount, raspOpenCount, raspOpenFailCount, toBeProtectedProcessCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRaspProtectStatisticsResponse {\n");
    
    sb.append("    hitWhiteProcessCount: ").append(toIndentedString(hitWhiteProcessCount)).append("\n");
    sb.append("    processCount: ").append(toIndentedString(processCount)).append("\n");
    sb.append("    protectAbnormalProcessCount: ").append(toIndentedString(protectAbnormalProcessCount)).append("\n");
    sb.append("    protectedProcessCount: ").append(toIndentedString(protectedProcessCount)).append("\n");
    sb.append("    raspCloseCount: ").append(toIndentedString(raspCloseCount)).append("\n");
    sb.append("    raspOpenCount: ").append(toIndentedString(raspOpenCount)).append("\n");
    sb.append("    raspOpenFailCount: ").append(toIndentedString(raspOpenFailCount)).append("\n");
    sb.append("    toBeProtectedProcessCount: ").append(toIndentedString(toBeProtectedProcessCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
