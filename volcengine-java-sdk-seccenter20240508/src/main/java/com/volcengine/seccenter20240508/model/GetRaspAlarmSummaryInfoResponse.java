/*
 * seccenter20240508
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.seccenter20240508.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.seccenter20240508.model.AlarmContentForGetRaspAlarmSummaryInfoOutput;
import com.volcengine.seccenter20240508.model.AlarmDescForGetRaspAlarmSummaryInfoOutput;
import com.volcengine.seccenter20240508.model.AssetInfoForGetRaspAlarmSummaryInfoOutput;
import com.volcengine.seccenter20240508.model.ContainerInfoForGetRaspAlarmSummaryInfoOutput;
import com.volcengine.seccenter20240508.model.EndpointTraceForGetRaspAlarmSummaryInfoOutput;
import com.volcengine.seccenter20240508.model.HandlingRecordForGetRaspAlarmSummaryInfoOutput;
import com.volcengine.seccenter20240508.model.RawDataForGetRaspAlarmSummaryInfoOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * GetRaspAlarmSummaryInfoResponse
 */



public class GetRaspAlarmSummaryInfoResponse extends com.volcengine.model.AbstractResponse {
  @SerializedName("AlarmContent")
  private AlarmContentForGetRaspAlarmSummaryInfoOutput alarmContent = null;

  @SerializedName("AlarmDesc")
  private AlarmDescForGetRaspAlarmSummaryInfoOutput alarmDesc = null;

  @SerializedName("AssetInfo")
  private AssetInfoForGetRaspAlarmSummaryInfoOutput assetInfo = null;

  @SerializedName("ContainerInfo")
  private ContainerInfoForGetRaspAlarmSummaryInfoOutput containerInfo = null;

  @SerializedName("EndpointTrace")
  private EndpointTraceForGetRaspAlarmSummaryInfoOutput endpointTrace = null;

  @SerializedName("HandlingRecords")
  private List<HandlingRecordForGetRaspAlarmSummaryInfoOutput> handlingRecords = null;

  @SerializedName("RawData")
  private RawDataForGetRaspAlarmSummaryInfoOutput rawData = null;

  public GetRaspAlarmSummaryInfoResponse alarmContent(AlarmContentForGetRaspAlarmSummaryInfoOutput alarmContent) {
    this.alarmContent = alarmContent;
    return this;
  }

   /**
   * Get alarmContent
   * @return alarmContent
  **/
  @Valid
  @Schema(description = "")
  public AlarmContentForGetRaspAlarmSummaryInfoOutput getAlarmContent() {
    return alarmContent;
  }

  public void setAlarmContent(AlarmContentForGetRaspAlarmSummaryInfoOutput alarmContent) {
    this.alarmContent = alarmContent;
  }

  public GetRaspAlarmSummaryInfoResponse alarmDesc(AlarmDescForGetRaspAlarmSummaryInfoOutput alarmDesc) {
    this.alarmDesc = alarmDesc;
    return this;
  }

   /**
   * Get alarmDesc
   * @return alarmDesc
  **/
  @Valid
  @Schema(description = "")
  public AlarmDescForGetRaspAlarmSummaryInfoOutput getAlarmDesc() {
    return alarmDesc;
  }

  public void setAlarmDesc(AlarmDescForGetRaspAlarmSummaryInfoOutput alarmDesc) {
    this.alarmDesc = alarmDesc;
  }

  public GetRaspAlarmSummaryInfoResponse assetInfo(AssetInfoForGetRaspAlarmSummaryInfoOutput assetInfo) {
    this.assetInfo = assetInfo;
    return this;
  }

   /**
   * Get assetInfo
   * @return assetInfo
  **/
  @Valid
  @Schema(description = "")
  public AssetInfoForGetRaspAlarmSummaryInfoOutput getAssetInfo() {
    return assetInfo;
  }

  public void setAssetInfo(AssetInfoForGetRaspAlarmSummaryInfoOutput assetInfo) {
    this.assetInfo = assetInfo;
  }

  public GetRaspAlarmSummaryInfoResponse containerInfo(ContainerInfoForGetRaspAlarmSummaryInfoOutput containerInfo) {
    this.containerInfo = containerInfo;
    return this;
  }

   /**
   * Get containerInfo
   * @return containerInfo
  **/
  @Valid
  @Schema(description = "")
  public ContainerInfoForGetRaspAlarmSummaryInfoOutput getContainerInfo() {
    return containerInfo;
  }

  public void setContainerInfo(ContainerInfoForGetRaspAlarmSummaryInfoOutput containerInfo) {
    this.containerInfo = containerInfo;
  }

  public GetRaspAlarmSummaryInfoResponse endpointTrace(EndpointTraceForGetRaspAlarmSummaryInfoOutput endpointTrace) {
    this.endpointTrace = endpointTrace;
    return this;
  }

   /**
   * Get endpointTrace
   * @return endpointTrace
  **/
  @Valid
  @Schema(description = "")
  public EndpointTraceForGetRaspAlarmSummaryInfoOutput getEndpointTrace() {
    return endpointTrace;
  }

  public void setEndpointTrace(EndpointTraceForGetRaspAlarmSummaryInfoOutput endpointTrace) {
    this.endpointTrace = endpointTrace;
  }

  public GetRaspAlarmSummaryInfoResponse handlingRecords(List<HandlingRecordForGetRaspAlarmSummaryInfoOutput> handlingRecords) {
    this.handlingRecords = handlingRecords;
    return this;
  }

  public GetRaspAlarmSummaryInfoResponse addHandlingRecordsItem(HandlingRecordForGetRaspAlarmSummaryInfoOutput handlingRecordsItem) {
    if (this.handlingRecords == null) {
      this.handlingRecords = new ArrayList<HandlingRecordForGetRaspAlarmSummaryInfoOutput>();
    }
    this.handlingRecords.add(handlingRecordsItem);
    return this;
  }

   /**
   * Get handlingRecords
   * @return handlingRecords
  **/
  @Valid
  @Schema(description = "")
  public List<HandlingRecordForGetRaspAlarmSummaryInfoOutput> getHandlingRecords() {
    return handlingRecords;
  }

  public void setHandlingRecords(List<HandlingRecordForGetRaspAlarmSummaryInfoOutput> handlingRecords) {
    this.handlingRecords = handlingRecords;
  }

  public GetRaspAlarmSummaryInfoResponse rawData(RawDataForGetRaspAlarmSummaryInfoOutput rawData) {
    this.rawData = rawData;
    return this;
  }

   /**
   * Get rawData
   * @return rawData
  **/
  @Valid
  @Schema(description = "")
  public RawDataForGetRaspAlarmSummaryInfoOutput getRawData() {
    return rawData;
  }

  public void setRawData(RawDataForGetRaspAlarmSummaryInfoOutput rawData) {
    this.rawData = rawData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRaspAlarmSummaryInfoResponse getRaspAlarmSummaryInfoResponse = (GetRaspAlarmSummaryInfoResponse) o;
    return Objects.equals(this.alarmContent, getRaspAlarmSummaryInfoResponse.alarmContent) &&
        Objects.equals(this.alarmDesc, getRaspAlarmSummaryInfoResponse.alarmDesc) &&
        Objects.equals(this.assetInfo, getRaspAlarmSummaryInfoResponse.assetInfo) &&
        Objects.equals(this.containerInfo, getRaspAlarmSummaryInfoResponse.containerInfo) &&
        Objects.equals(this.endpointTrace, getRaspAlarmSummaryInfoResponse.endpointTrace) &&
        Objects.equals(this.handlingRecords, getRaspAlarmSummaryInfoResponse.handlingRecords) &&
        Objects.equals(this.rawData, getRaspAlarmSummaryInfoResponse.rawData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alarmContent, alarmDesc, assetInfo, containerInfo, endpointTrace, handlingRecords, rawData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRaspAlarmSummaryInfoResponse {\n");
    
    sb.append("    alarmContent: ").append(toIndentedString(alarmContent)).append("\n");
    sb.append("    alarmDesc: ").append(toIndentedString(alarmDesc)).append("\n");
    sb.append("    assetInfo: ").append(toIndentedString(assetInfo)).append("\n");
    sb.append("    containerInfo: ").append(toIndentedString(containerInfo)).append("\n");
    sb.append("    endpointTrace: ").append(toIndentedString(endpointTrace)).append("\n");
    sb.append("    handlingRecords: ").append(toIndentedString(handlingRecords)).append("\n");
    sb.append("    rawData: ").append(toIndentedString(rawData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
