/*
 * seccenter20240508
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.seccenter20240508.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * PlusAlarmInfo602ForGetAlarmBySmithKeyOutput
 */



public class PlusAlarmInfo602ForGetAlarmBySmithKeyOutput {
  @SerializedName("ConnectInfo")
  private String connectInfo = null;

  @SerializedName("FilePath")
  private String filePath = null;

  @SerializedName("PidTree")
  private String pidTree = null;

  @SerializedName("SocketArgv")
  private String socketArgv = null;

  public PlusAlarmInfo602ForGetAlarmBySmithKeyOutput connectInfo(String connectInfo) {
    this.connectInfo = connectInfo;
    return this;
  }

   /**
   * Get connectInfo
   * @return connectInfo
  **/
  @Schema(description = "")
  public String getConnectInfo() {
    return connectInfo;
  }

  public void setConnectInfo(String connectInfo) {
    this.connectInfo = connectInfo;
  }

  public PlusAlarmInfo602ForGetAlarmBySmithKeyOutput filePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

   /**
   * Get filePath
   * @return filePath
  **/
  @Schema(description = "")
  public String getFilePath() {
    return filePath;
  }

  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }

  public PlusAlarmInfo602ForGetAlarmBySmithKeyOutput pidTree(String pidTree) {
    this.pidTree = pidTree;
    return this;
  }

   /**
   * Get pidTree
   * @return pidTree
  **/
  @Schema(description = "")
  public String getPidTree() {
    return pidTree;
  }

  public void setPidTree(String pidTree) {
    this.pidTree = pidTree;
  }

  public PlusAlarmInfo602ForGetAlarmBySmithKeyOutput socketArgv(String socketArgv) {
    this.socketArgv = socketArgv;
    return this;
  }

   /**
   * Get socketArgv
   * @return socketArgv
  **/
  @Schema(description = "")
  public String getSocketArgv() {
    return socketArgv;
  }

  public void setSocketArgv(String socketArgv) {
    this.socketArgv = socketArgv;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlusAlarmInfo602ForGetAlarmBySmithKeyOutput plusAlarmInfo602ForGetAlarmBySmithKeyOutput = (PlusAlarmInfo602ForGetAlarmBySmithKeyOutput) o;
    return Objects.equals(this.connectInfo, plusAlarmInfo602ForGetAlarmBySmithKeyOutput.connectInfo) &&
        Objects.equals(this.filePath, plusAlarmInfo602ForGetAlarmBySmithKeyOutput.filePath) &&
        Objects.equals(this.pidTree, plusAlarmInfo602ForGetAlarmBySmithKeyOutput.pidTree) &&
        Objects.equals(this.socketArgv, plusAlarmInfo602ForGetAlarmBySmithKeyOutput.socketArgv);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectInfo, filePath, pidTree, socketArgv);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlusAlarmInfo602ForGetAlarmBySmithKeyOutput {\n");
    
    sb.append("    connectInfo: ").append(toIndentedString(connectInfo)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    pidTree: ").append(toIndentedString(pidTree)).append("\n");
    sb.append("    socketArgv: ").append(toIndentedString(socketArgv)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
