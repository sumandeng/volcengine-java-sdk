/*
 * seccenter20240508
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.seccenter20240508.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.seccenter20240508.model.RiskForListRegistryImagesInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * FilterForListRegistryImagesInput
 */



public class FilterForListRegistryImagesInput {
  @SerializedName("ImageID")
  private String imageID = null;

  @SerializedName("LatestFlag")
  private Boolean latestFlag = null;

  @SerializedName("Namespace")
  private String namespace = null;

  @SerializedName("PushTimeFrom")
  private Integer pushTimeFrom = null;

  @SerializedName("PushTimeTo")
  private Integer pushTimeTo = null;

  @SerializedName("RegistryName")
  private String registryName = null;

  @SerializedName("Repo")
  private String repo = null;

  @SerializedName("Risk")
  private RiskForListRegistryImagesInput risk = null;

  @SerializedName("RiskFlag")
  private Boolean riskFlag = null;

  @SerializedName("ScanStatus")
  private List<String> scanStatus = null;

  @SerializedName("ScanTimeFrom")
  private Integer scanTimeFrom = null;

  @SerializedName("ScanTimeTo")
  private Integer scanTimeTo = null;

  @SerializedName("Tag")
  private String tag = null;

  public FilterForListRegistryImagesInput imageID(String imageID) {
    this.imageID = imageID;
    return this;
  }

   /**
   * Get imageID
   * @return imageID
  **/
  @Schema(description = "")
  public String getImageID() {
    return imageID;
  }

  public void setImageID(String imageID) {
    this.imageID = imageID;
  }

  public FilterForListRegistryImagesInput latestFlag(Boolean latestFlag) {
    this.latestFlag = latestFlag;
    return this;
  }

   /**
   * Get latestFlag
   * @return latestFlag
  **/
  @Schema(description = "")
  public Boolean isLatestFlag() {
    return latestFlag;
  }

  public void setLatestFlag(Boolean latestFlag) {
    this.latestFlag = latestFlag;
  }

  public FilterForListRegistryImagesInput namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

   /**
   * Get namespace
   * @return namespace
  **/
  @Schema(description = "")
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }

  public FilterForListRegistryImagesInput pushTimeFrom(Integer pushTimeFrom) {
    this.pushTimeFrom = pushTimeFrom;
    return this;
  }

   /**
   * Get pushTimeFrom
   * @return pushTimeFrom
  **/
  @Schema(description = "")
  public Integer getPushTimeFrom() {
    return pushTimeFrom;
  }

  public void setPushTimeFrom(Integer pushTimeFrom) {
    this.pushTimeFrom = pushTimeFrom;
  }

  public FilterForListRegistryImagesInput pushTimeTo(Integer pushTimeTo) {
    this.pushTimeTo = pushTimeTo;
    return this;
  }

   /**
   * Get pushTimeTo
   * @return pushTimeTo
  **/
  @Schema(description = "")
  public Integer getPushTimeTo() {
    return pushTimeTo;
  }

  public void setPushTimeTo(Integer pushTimeTo) {
    this.pushTimeTo = pushTimeTo;
  }

  public FilterForListRegistryImagesInput registryName(String registryName) {
    this.registryName = registryName;
    return this;
  }

   /**
   * Get registryName
   * @return registryName
  **/
  @Schema(description = "")
  public String getRegistryName() {
    return registryName;
  }

  public void setRegistryName(String registryName) {
    this.registryName = registryName;
  }

  public FilterForListRegistryImagesInput repo(String repo) {
    this.repo = repo;
    return this;
  }

   /**
   * Get repo
   * @return repo
  **/
  @Schema(description = "")
  public String getRepo() {
    return repo;
  }

  public void setRepo(String repo) {
    this.repo = repo;
  }

  public FilterForListRegistryImagesInput risk(RiskForListRegistryImagesInput risk) {
    this.risk = risk;
    return this;
  }

   /**
   * Get risk
   * @return risk
  **/
  @Valid
  @Schema(description = "")
  public RiskForListRegistryImagesInput getRisk() {
    return risk;
  }

  public void setRisk(RiskForListRegistryImagesInput risk) {
    this.risk = risk;
  }

  public FilterForListRegistryImagesInput riskFlag(Boolean riskFlag) {
    this.riskFlag = riskFlag;
    return this;
  }

   /**
   * Get riskFlag
   * @return riskFlag
  **/
  @Schema(description = "")
  public Boolean isRiskFlag() {
    return riskFlag;
  }

  public void setRiskFlag(Boolean riskFlag) {
    this.riskFlag = riskFlag;
  }

  public FilterForListRegistryImagesInput scanStatus(List<String> scanStatus) {
    this.scanStatus = scanStatus;
    return this;
  }

  public FilterForListRegistryImagesInput addScanStatusItem(String scanStatusItem) {
    if (this.scanStatus == null) {
      this.scanStatus = new ArrayList<String>();
    }
    this.scanStatus.add(scanStatusItem);
    return this;
  }

   /**
   * Get scanStatus
   * @return scanStatus
  **/
  @Schema(description = "")
  public List<String> getScanStatus() {
    return scanStatus;
  }

  public void setScanStatus(List<String> scanStatus) {
    this.scanStatus = scanStatus;
  }

  public FilterForListRegistryImagesInput scanTimeFrom(Integer scanTimeFrom) {
    this.scanTimeFrom = scanTimeFrom;
    return this;
  }

   /**
   * Get scanTimeFrom
   * @return scanTimeFrom
  **/
  @Schema(description = "")
  public Integer getScanTimeFrom() {
    return scanTimeFrom;
  }

  public void setScanTimeFrom(Integer scanTimeFrom) {
    this.scanTimeFrom = scanTimeFrom;
  }

  public FilterForListRegistryImagesInput scanTimeTo(Integer scanTimeTo) {
    this.scanTimeTo = scanTimeTo;
    return this;
  }

   /**
   * Get scanTimeTo
   * @return scanTimeTo
  **/
  @Schema(description = "")
  public Integer getScanTimeTo() {
    return scanTimeTo;
  }

  public void setScanTimeTo(Integer scanTimeTo) {
    this.scanTimeTo = scanTimeTo;
  }

  public FilterForListRegistryImagesInput tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  @Schema(description = "")
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterForListRegistryImagesInput filterForListRegistryImagesInput = (FilterForListRegistryImagesInput) o;
    return Objects.equals(this.imageID, filterForListRegistryImagesInput.imageID) &&
        Objects.equals(this.latestFlag, filterForListRegistryImagesInput.latestFlag) &&
        Objects.equals(this.namespace, filterForListRegistryImagesInput.namespace) &&
        Objects.equals(this.pushTimeFrom, filterForListRegistryImagesInput.pushTimeFrom) &&
        Objects.equals(this.pushTimeTo, filterForListRegistryImagesInput.pushTimeTo) &&
        Objects.equals(this.registryName, filterForListRegistryImagesInput.registryName) &&
        Objects.equals(this.repo, filterForListRegistryImagesInput.repo) &&
        Objects.equals(this.risk, filterForListRegistryImagesInput.risk) &&
        Objects.equals(this.riskFlag, filterForListRegistryImagesInput.riskFlag) &&
        Objects.equals(this.scanStatus, filterForListRegistryImagesInput.scanStatus) &&
        Objects.equals(this.scanTimeFrom, filterForListRegistryImagesInput.scanTimeFrom) &&
        Objects.equals(this.scanTimeTo, filterForListRegistryImagesInput.scanTimeTo) &&
        Objects.equals(this.tag, filterForListRegistryImagesInput.tag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageID, latestFlag, namespace, pushTimeFrom, pushTimeTo, registryName, repo, risk, riskFlag, scanStatus, scanTimeFrom, scanTimeTo, tag);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterForListRegistryImagesInput {\n");
    
    sb.append("    imageID: ").append(toIndentedString(imageID)).append("\n");
    sb.append("    latestFlag: ").append(toIndentedString(latestFlag)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    pushTimeFrom: ").append(toIndentedString(pushTimeFrom)).append("\n");
    sb.append("    pushTimeTo: ").append(toIndentedString(pushTimeTo)).append("\n");
    sb.append("    registryName: ").append(toIndentedString(registryName)).append("\n");
    sb.append("    repo: ").append(toIndentedString(repo)).append("\n");
    sb.append("    risk: ").append(toIndentedString(risk)).append("\n");
    sb.append("    riskFlag: ").append(toIndentedString(riskFlag)).append("\n");
    sb.append("    scanStatus: ").append(toIndentedString(scanStatus)).append("\n");
    sb.append("    scanTimeFrom: ").append(toIndentedString(scanTimeFrom)).append("\n");
    sb.append("    scanTimeTo: ").append(toIndentedString(scanTimeTo)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
