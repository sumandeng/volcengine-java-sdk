/*
 * seccenter20240508
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.seccenter20240508.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DataForListRegistryNamespacesOutput
 */



public class DataForListRegistryNamespacesOutput {
  @SerializedName("ID")
  private String ID = null;

  @SerializedName("Namespace")
  private String namespace = null;

  @SerializedName("NamespaceCreateTime")
  private Integer namespaceCreateTime = null;

  @SerializedName("Region")
  private String region = null;

  @SerializedName("RegistryName")
  private String registryName = null;

  @SerializedName("RegistryType")
  private String registryType = null;

  @SerializedName("TotalImageCount")
  private Integer totalImageCount = null;

  public DataForListRegistryNamespacesOutput ID(String ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @Schema(description = "")
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }

  public DataForListRegistryNamespacesOutput namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

   /**
   * Get namespace
   * @return namespace
  **/
  @Schema(description = "")
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }

  public DataForListRegistryNamespacesOutput namespaceCreateTime(Integer namespaceCreateTime) {
    this.namespaceCreateTime = namespaceCreateTime;
    return this;
  }

   /**
   * Get namespaceCreateTime
   * @return namespaceCreateTime
  **/
  @Schema(description = "")
  public Integer getNamespaceCreateTime() {
    return namespaceCreateTime;
  }

  public void setNamespaceCreateTime(Integer namespaceCreateTime) {
    this.namespaceCreateTime = namespaceCreateTime;
  }

  public DataForListRegistryNamespacesOutput region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @Schema(description = "")
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }

  public DataForListRegistryNamespacesOutput registryName(String registryName) {
    this.registryName = registryName;
    return this;
  }

   /**
   * Get registryName
   * @return registryName
  **/
  @Schema(description = "")
  public String getRegistryName() {
    return registryName;
  }

  public void setRegistryName(String registryName) {
    this.registryName = registryName;
  }

  public DataForListRegistryNamespacesOutput registryType(String registryType) {
    this.registryType = registryType;
    return this;
  }

   /**
   * Get registryType
   * @return registryType
  **/
  @Schema(description = "")
  public String getRegistryType() {
    return registryType;
  }

  public void setRegistryType(String registryType) {
    this.registryType = registryType;
  }

  public DataForListRegistryNamespacesOutput totalImageCount(Integer totalImageCount) {
    this.totalImageCount = totalImageCount;
    return this;
  }

   /**
   * Get totalImageCount
   * @return totalImageCount
  **/
  @Schema(description = "")
  public Integer getTotalImageCount() {
    return totalImageCount;
  }

  public void setTotalImageCount(Integer totalImageCount) {
    this.totalImageCount = totalImageCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataForListRegistryNamespacesOutput dataForListRegistryNamespacesOutput = (DataForListRegistryNamespacesOutput) o;
    return Objects.equals(this.ID, dataForListRegistryNamespacesOutput.ID) &&
        Objects.equals(this.namespace, dataForListRegistryNamespacesOutput.namespace) &&
        Objects.equals(this.namespaceCreateTime, dataForListRegistryNamespacesOutput.namespaceCreateTime) &&
        Objects.equals(this.region, dataForListRegistryNamespacesOutput.region) &&
        Objects.equals(this.registryName, dataForListRegistryNamespacesOutput.registryName) &&
        Objects.equals(this.registryType, dataForListRegistryNamespacesOutput.registryType) &&
        Objects.equals(this.totalImageCount, dataForListRegistryNamespacesOutput.totalImageCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, namespace, namespaceCreateTime, region, registryName, registryType, totalImageCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataForListRegistryNamespacesOutput {\n");
    
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    namespaceCreateTime: ").append(toIndentedString(namespaceCreateTime)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    registryName: ").append(toIndentedString(registryName)).append("\n");
    sb.append("    registryType: ").append(toIndentedString(registryType)).append("\n");
    sb.append("    totalImageCount: ").append(toIndentedString(totalImageCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
