/*
 * seccenter20240508
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.seccenter20240508.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DataForGetHostVolumeOutput
 */



public class DataForGetHostVolumeOutput {
  @SerializedName("Free")
  private String free = null;

  @SerializedName("Fstype")
  private String fstype = null;

  @SerializedName("MountPoint")
  private String mountPoint = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("Total")
  private String total = null;

  @SerializedName("Usage")
  private String usage = null;

  @SerializedName("Used")
  private String used = null;

  public DataForGetHostVolumeOutput free(String free) {
    this.free = free;
    return this;
  }

   /**
   * Get free
   * @return free
  **/
  @Schema(description = "")
  public String getFree() {
    return free;
  }

  public void setFree(String free) {
    this.free = free;
  }

  public DataForGetHostVolumeOutput fstype(String fstype) {
    this.fstype = fstype;
    return this;
  }

   /**
   * Get fstype
   * @return fstype
  **/
  @Schema(description = "")
  public String getFstype() {
    return fstype;
  }

  public void setFstype(String fstype) {
    this.fstype = fstype;
  }

  public DataForGetHostVolumeOutput mountPoint(String mountPoint) {
    this.mountPoint = mountPoint;
    return this;
  }

   /**
   * Get mountPoint
   * @return mountPoint
  **/
  @Schema(description = "")
  public String getMountPoint() {
    return mountPoint;
  }

  public void setMountPoint(String mountPoint) {
    this.mountPoint = mountPoint;
  }

  public DataForGetHostVolumeOutput name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DataForGetHostVolumeOutput total(String total) {
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @Schema(description = "")
  public String getTotal() {
    return total;
  }

  public void setTotal(String total) {
    this.total = total;
  }

  public DataForGetHostVolumeOutput usage(String usage) {
    this.usage = usage;
    return this;
  }

   /**
   * Get usage
   * @return usage
  **/
  @Schema(description = "")
  public String getUsage() {
    return usage;
  }

  public void setUsage(String usage) {
    this.usage = usage;
  }

  public DataForGetHostVolumeOutput used(String used) {
    this.used = used;
    return this;
  }

   /**
   * Get used
   * @return used
  **/
  @Schema(description = "")
  public String getUsed() {
    return used;
  }

  public void setUsed(String used) {
    this.used = used;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataForGetHostVolumeOutput dataForGetHostVolumeOutput = (DataForGetHostVolumeOutput) o;
    return Objects.equals(this.free, dataForGetHostVolumeOutput.free) &&
        Objects.equals(this.fstype, dataForGetHostVolumeOutput.fstype) &&
        Objects.equals(this.mountPoint, dataForGetHostVolumeOutput.mountPoint) &&
        Objects.equals(this.name, dataForGetHostVolumeOutput.name) &&
        Objects.equals(this.total, dataForGetHostVolumeOutput.total) &&
        Objects.equals(this.usage, dataForGetHostVolumeOutput.usage) &&
        Objects.equals(this.used, dataForGetHostVolumeOutput.used);
  }

  @Override
  public int hashCode() {
    return Objects.hash(free, fstype, mountPoint, name, total, usage, used);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataForGetHostVolumeOutput {\n");
    
    sb.append("    free: ").append(toIndentedString(free)).append("\n");
    sb.append("    fstype: ").append(toIndentedString(fstype)).append("\n");
    sb.append("    mountPoint: ").append(toIndentedString(mountPoint)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
