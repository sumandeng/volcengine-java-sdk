/*
 * apig
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.apig.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.apig.model.HTTPCookieForCreateUpstreamInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ConsistentHashLBForCreateUpstreamInput
 */



public class ConsistentHashLBForCreateUpstreamInput {
  @SerializedName("HTTPCookie")
  private HTTPCookieForCreateUpstreamInput htTPCookie = null;

  @SerializedName("HashKey")
  private String hashKey = null;

  @SerializedName("HttpHeaderName")
  private String httpHeaderName = null;

  @SerializedName("HttpQueryParameterName")
  private String httpQueryParameterName = null;

  @SerializedName("UseSourceIp")
  private String useSourceIp = null;

  public ConsistentHashLBForCreateUpstreamInput htTPCookie(HTTPCookieForCreateUpstreamInput htTPCookie) {
    this.htTPCookie = htTPCookie;
    return this;
  }

   /**
   * Get htTPCookie
   * @return htTPCookie
  **/
  @Valid
  @Schema(description = "")
  public HTTPCookieForCreateUpstreamInput getHtTPCookie() {
    return htTPCookie;
  }

  public void setHtTPCookie(HTTPCookieForCreateUpstreamInput htTPCookie) {
    this.htTPCookie = htTPCookie;
  }

  public ConsistentHashLBForCreateUpstreamInput hashKey(String hashKey) {
    this.hashKey = hashKey;
    return this;
  }

   /**
   * Get hashKey
   * @return hashKey
  **/
  @Schema(description = "")
  public String getHashKey() {
    return hashKey;
  }

  public void setHashKey(String hashKey) {
    this.hashKey = hashKey;
  }

  public ConsistentHashLBForCreateUpstreamInput httpHeaderName(String httpHeaderName) {
    this.httpHeaderName = httpHeaderName;
    return this;
  }

   /**
   * Get httpHeaderName
   * @return httpHeaderName
  **/
  @Schema(description = "")
  public String getHttpHeaderName() {
    return httpHeaderName;
  }

  public void setHttpHeaderName(String httpHeaderName) {
    this.httpHeaderName = httpHeaderName;
  }

  public ConsistentHashLBForCreateUpstreamInput httpQueryParameterName(String httpQueryParameterName) {
    this.httpQueryParameterName = httpQueryParameterName;
    return this;
  }

   /**
   * Get httpQueryParameterName
   * @return httpQueryParameterName
  **/
  @Schema(description = "")
  public String getHttpQueryParameterName() {
    return httpQueryParameterName;
  }

  public void setHttpQueryParameterName(String httpQueryParameterName) {
    this.httpQueryParameterName = httpQueryParameterName;
  }

  public ConsistentHashLBForCreateUpstreamInput useSourceIp(String useSourceIp) {
    this.useSourceIp = useSourceIp;
    return this;
  }

   /**
   * Get useSourceIp
   * @return useSourceIp
  **/
  @Schema(description = "")
  public String getUseSourceIp() {
    return useSourceIp;
  }

  public void setUseSourceIp(String useSourceIp) {
    this.useSourceIp = useSourceIp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsistentHashLBForCreateUpstreamInput consistentHashLBForCreateUpstreamInput = (ConsistentHashLBForCreateUpstreamInput) o;
    return Objects.equals(this.htTPCookie, consistentHashLBForCreateUpstreamInput.htTPCookie) &&
        Objects.equals(this.hashKey, consistentHashLBForCreateUpstreamInput.hashKey) &&
        Objects.equals(this.httpHeaderName, consistentHashLBForCreateUpstreamInput.httpHeaderName) &&
        Objects.equals(this.httpQueryParameterName, consistentHashLBForCreateUpstreamInput.httpQueryParameterName) &&
        Objects.equals(this.useSourceIp, consistentHashLBForCreateUpstreamInput.useSourceIp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(htTPCookie, hashKey, httpHeaderName, httpQueryParameterName, useSourceIp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsistentHashLBForCreateUpstreamInput {\n");
    
    sb.append("    htTPCookie: ").append(toIndentedString(htTPCookie)).append("\n");
    sb.append("    hashKey: ").append(toIndentedString(hashKey)).append("\n");
    sb.append("    httpHeaderName: ").append(toIndentedString(httpHeaderName)).append("\n");
    sb.append("    httpQueryParameterName: ").append(toIndentedString(httpQueryParameterName)).append("\n");
    sb.append("    useSourceIp: ").append(toIndentedString(useSourceIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
