/*
 * apig
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.apig.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CircuitBreakingSettingsForGetUpstreamOutput
 */



public class CircuitBreakingSettingsForGetUpstreamOutput {
  @SerializedName("BaseEjectionTime")
  private Long baseEjectionTime = null;

  @SerializedName("ConsecutiveErrors")
  private Long consecutiveErrors = null;

  @SerializedName("Enable")
  private Boolean enable = null;

  @SerializedName("Interval")
  private Long interval = null;

  @SerializedName("MaxEjectionPercent")
  private Integer maxEjectionPercent = null;

  @SerializedName("MinHealthPercent")
  private Integer minHealthPercent = null;

  public CircuitBreakingSettingsForGetUpstreamOutput baseEjectionTime(Long baseEjectionTime) {
    this.baseEjectionTime = baseEjectionTime;
    return this;
  }

   /**
   * Get baseEjectionTime
   * @return baseEjectionTime
  **/
  @Schema(description = "")
  public Long getBaseEjectionTime() {
    return baseEjectionTime;
  }

  public void setBaseEjectionTime(Long baseEjectionTime) {
    this.baseEjectionTime = baseEjectionTime;
  }

  public CircuitBreakingSettingsForGetUpstreamOutput consecutiveErrors(Long consecutiveErrors) {
    this.consecutiveErrors = consecutiveErrors;
    return this;
  }

   /**
   * Get consecutiveErrors
   * @return consecutiveErrors
  **/
  @Schema(description = "")
  public Long getConsecutiveErrors() {
    return consecutiveErrors;
  }

  public void setConsecutiveErrors(Long consecutiveErrors) {
    this.consecutiveErrors = consecutiveErrors;
  }

  public CircuitBreakingSettingsForGetUpstreamOutput enable(Boolean enable) {
    this.enable = enable;
    return this;
  }

   /**
   * Get enable
   * @return enable
  **/
  @Schema(description = "")
  public Boolean isEnable() {
    return enable;
  }

  public void setEnable(Boolean enable) {
    this.enable = enable;
  }

  public CircuitBreakingSettingsForGetUpstreamOutput interval(Long interval) {
    this.interval = interval;
    return this;
  }

   /**
   * Get interval
   * @return interval
  **/
  @Schema(description = "")
  public Long getInterval() {
    return interval;
  }

  public void setInterval(Long interval) {
    this.interval = interval;
  }

  public CircuitBreakingSettingsForGetUpstreamOutput maxEjectionPercent(Integer maxEjectionPercent) {
    this.maxEjectionPercent = maxEjectionPercent;
    return this;
  }

   /**
   * Get maxEjectionPercent
   * @return maxEjectionPercent
  **/
  @Schema(description = "")
  public Integer getMaxEjectionPercent() {
    return maxEjectionPercent;
  }

  public void setMaxEjectionPercent(Integer maxEjectionPercent) {
    this.maxEjectionPercent = maxEjectionPercent;
  }

  public CircuitBreakingSettingsForGetUpstreamOutput minHealthPercent(Integer minHealthPercent) {
    this.minHealthPercent = minHealthPercent;
    return this;
  }

   /**
   * Get minHealthPercent
   * @return minHealthPercent
  **/
  @Schema(description = "")
  public Integer getMinHealthPercent() {
    return minHealthPercent;
  }

  public void setMinHealthPercent(Integer minHealthPercent) {
    this.minHealthPercent = minHealthPercent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CircuitBreakingSettingsForGetUpstreamOutput circuitBreakingSettingsForGetUpstreamOutput = (CircuitBreakingSettingsForGetUpstreamOutput) o;
    return Objects.equals(this.baseEjectionTime, circuitBreakingSettingsForGetUpstreamOutput.baseEjectionTime) &&
        Objects.equals(this.consecutiveErrors, circuitBreakingSettingsForGetUpstreamOutput.consecutiveErrors) &&
        Objects.equals(this.enable, circuitBreakingSettingsForGetUpstreamOutput.enable) &&
        Objects.equals(this.interval, circuitBreakingSettingsForGetUpstreamOutput.interval) &&
        Objects.equals(this.maxEjectionPercent, circuitBreakingSettingsForGetUpstreamOutput.maxEjectionPercent) &&
        Objects.equals(this.minHealthPercent, circuitBreakingSettingsForGetUpstreamOutput.minHealthPercent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseEjectionTime, consecutiveErrors, enable, interval, maxEjectionPercent, minHealthPercent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CircuitBreakingSettingsForGetUpstreamOutput {\n");
    
    sb.append("    baseEjectionTime: ").append(toIndentedString(baseEjectionTime)).append("\n");
    sb.append("    consecutiveErrors: ").append(toIndentedString(consecutiveErrors)).append("\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    maxEjectionPercent: ").append(toIndentedString(maxEjectionPercent)).append("\n");
    sb.append("    minHealthPercent: ").append(toIndentedString(minHealthPercent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
