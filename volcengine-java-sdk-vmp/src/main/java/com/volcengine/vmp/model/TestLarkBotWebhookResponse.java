/*
 * vmp
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vmp.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * TestLarkBotWebhookResponse
 */



public class TestLarkBotWebhookResponse extends com.volcengine.model.AbstractResponse {
  @SerializedName("ErrorMessage")
  private String errorMessage = null;

  @SerializedName("LarkCode")
  private Integer larkCode = null;

  @SerializedName("LarkMessage")
  private String larkMessage = null;

  @SerializedName("StatusCode")
  private Integer statusCode = null;

  public TestLarkBotWebhookResponse errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Get errorMessage
   * @return errorMessage
  **/
  @Schema(description = "")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  public TestLarkBotWebhookResponse larkCode(Integer larkCode) {
    this.larkCode = larkCode;
    return this;
  }

   /**
   * Get larkCode
   * @return larkCode
  **/
  @Schema(description = "")
  public Integer getLarkCode() {
    return larkCode;
  }

  public void setLarkCode(Integer larkCode) {
    this.larkCode = larkCode;
  }

  public TestLarkBotWebhookResponse larkMessage(String larkMessage) {
    this.larkMessage = larkMessage;
    return this;
  }

   /**
   * Get larkMessage
   * @return larkMessage
  **/
  @Schema(description = "")
  public String getLarkMessage() {
    return larkMessage;
  }

  public void setLarkMessage(String larkMessage) {
    this.larkMessage = larkMessage;
  }

  public TestLarkBotWebhookResponse statusCode(Integer statusCode) {
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Get statusCode
   * @return statusCode
  **/
  @Schema(description = "")
  public Integer getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestLarkBotWebhookResponse testLarkBotWebhookResponse = (TestLarkBotWebhookResponse) o;
    return Objects.equals(this.errorMessage, testLarkBotWebhookResponse.errorMessage) &&
        Objects.equals(this.larkCode, testLarkBotWebhookResponse.larkCode) &&
        Objects.equals(this.larkMessage, testLarkBotWebhookResponse.larkMessage) &&
        Objects.equals(this.statusCode, testLarkBotWebhookResponse.statusCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorMessage, larkCode, larkMessage, statusCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestLarkBotWebhookResponse {\n");
    
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    larkCode: ").append(toIndentedString(larkCode)).append("\n");
    sb.append("    larkMessage: ").append(toIndentedString(larkMessage)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
