/*
 * vedbm
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vedbm.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DescribeBackupsRequest
 */



public class DescribeBackupsRequest {
  @SerializedName("BackupEndTime")
  private String backupEndTime = null;

  /**
   * Gets or Sets backupMethod
   */
  @JsonAdapter(BackupMethodEnum.Adapter.class)
  public enum BackupMethodEnum {
    @SerializedName("Physical")
    PHYSICAL("Physical");

    private String value;

    BackupMethodEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BackupMethodEnum fromValue(String input) {
      for (BackupMethodEnum b : BackupMethodEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BackupMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupMethodEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public BackupMethodEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return BackupMethodEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("BackupMethod")
  private BackupMethodEnum backupMethod = null;

  @SerializedName("BackupStartTime")
  private String backupStartTime = null;

  /**
   * Gets or Sets backupStatus
   */
  @JsonAdapter(BackupStatusEnum.Adapter.class)
  public enum BackupStatusEnum {
    @SerializedName("Failed")
    FAILED("Failed"),
    @SerializedName("Running")
    RUNNING("Running"),
    @SerializedName("Success")
    SUCCESS("Success");

    private String value;

    BackupStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BackupStatusEnum fromValue(String input) {
      for (BackupStatusEnum b : BackupStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BackupStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupStatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public BackupStatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return BackupStatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("BackupStatus")
  private BackupStatusEnum backupStatus = null;

  /**
   * Gets or Sets backupType
   */
  @JsonAdapter(BackupTypeEnum.Adapter.class)
  public enum BackupTypeEnum {
    @SerializedName("Full")
    FULL("Full");

    private String value;

    BackupTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BackupTypeEnum fromValue(String input) {
      for (BackupTypeEnum b : BackupTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BackupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public BackupTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return BackupTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("BackupType")
  private BackupTypeEnum backupType = null;

  @SerializedName("InstanceId")
  private String instanceId = null;

  @SerializedName("PageNumber")
  private Integer pageNumber = null;

  @SerializedName("PageSize")
  private Integer pageSize = null;

  public DescribeBackupsRequest backupEndTime(String backupEndTime) {
    this.backupEndTime = backupEndTime;
    return this;
  }

   /**
   * Get backupEndTime
   * @return backupEndTime
  **/
  @Schema(description = "")
  public String getBackupEndTime() {
    return backupEndTime;
  }

  public void setBackupEndTime(String backupEndTime) {
    this.backupEndTime = backupEndTime;
  }

  public DescribeBackupsRequest backupMethod(BackupMethodEnum backupMethod) {
    this.backupMethod = backupMethod;
    return this;
  }

   /**
   * Get backupMethod
   * @return backupMethod
  **/
  @Schema(description = "")
  public BackupMethodEnum getBackupMethod() {
    return backupMethod;
  }

  public void setBackupMethod(BackupMethodEnum backupMethod) {
    this.backupMethod = backupMethod;
  }

  public DescribeBackupsRequest backupStartTime(String backupStartTime) {
    this.backupStartTime = backupStartTime;
    return this;
  }

   /**
   * Get backupStartTime
   * @return backupStartTime
  **/
  @Schema(description = "")
  public String getBackupStartTime() {
    return backupStartTime;
  }

  public void setBackupStartTime(String backupStartTime) {
    this.backupStartTime = backupStartTime;
  }

  public DescribeBackupsRequest backupStatus(BackupStatusEnum backupStatus) {
    this.backupStatus = backupStatus;
    return this;
  }

   /**
   * Get backupStatus
   * @return backupStatus
  **/
  @Schema(description = "")
  public BackupStatusEnum getBackupStatus() {
    return backupStatus;
  }

  public void setBackupStatus(BackupStatusEnum backupStatus) {
    this.backupStatus = backupStatus;
  }

  public DescribeBackupsRequest backupType(BackupTypeEnum backupType) {
    this.backupType = backupType;
    return this;
  }

   /**
   * Get backupType
   * @return backupType
  **/
  @Schema(description = "")
  public BackupTypeEnum getBackupType() {
    return backupType;
  }

  public void setBackupType(BackupTypeEnum backupType) {
    this.backupType = backupType;
  }

  public DescribeBackupsRequest instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Get instanceId
   * @return instanceId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }

  public DescribeBackupsRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * @return pageNumber
  **/
  @Schema(description = "")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public DescribeBackupsRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeBackupsRequest describeBackupsRequest = (DescribeBackupsRequest) o;
    return Objects.equals(this.backupEndTime, describeBackupsRequest.backupEndTime) &&
        Objects.equals(this.backupMethod, describeBackupsRequest.backupMethod) &&
        Objects.equals(this.backupStartTime, describeBackupsRequest.backupStartTime) &&
        Objects.equals(this.backupStatus, describeBackupsRequest.backupStatus) &&
        Objects.equals(this.backupType, describeBackupsRequest.backupType) &&
        Objects.equals(this.instanceId, describeBackupsRequest.instanceId) &&
        Objects.equals(this.pageNumber, describeBackupsRequest.pageNumber) &&
        Objects.equals(this.pageSize, describeBackupsRequest.pageSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupEndTime, backupMethod, backupStartTime, backupStatus, backupType, instanceId, pageNumber, pageSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeBackupsRequest {\n");
    
    sb.append("    backupEndTime: ").append(toIndentedString(backupEndTime)).append("\n");
    sb.append("    backupMethod: ").append(toIndentedString(backupMethod)).append("\n");
    sb.append("    backupStartTime: ").append(toIndentedString(backupStartTime)).append("\n");
    sb.append("    backupStatus: ").append(toIndentedString(backupStatus)).append("\n");
    sb.append("    backupType: ").append(toIndentedString(backupType)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
