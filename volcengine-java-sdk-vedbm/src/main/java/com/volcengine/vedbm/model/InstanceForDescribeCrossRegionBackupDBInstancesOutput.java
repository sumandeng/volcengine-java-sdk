/*
 * vedbm
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vedbm.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * InstanceForDescribeCrossRegionBackupDBInstancesOutput
 */



public class InstanceForDescribeCrossRegionBackupDBInstancesOutput {
  @SerializedName("CrossRegionBackup")
  private Boolean crossRegionBackup = null;

  /**
   * Gets or Sets dbEngineVersion
   */
  @JsonAdapter(DbEngineVersionEnum.Adapter.class)
  public enum DbEngineVersionEnum {
    @SerializedName("MySQL_5_7")
    MYSQL_5_7("MySQL_5_7"),
    @SerializedName("MySQL_8_0")
    MYSQL_8_0("MySQL_8_0");

    private String value;

    DbEngineVersionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DbEngineVersionEnum fromValue(String input) {
      for (DbEngineVersionEnum b : DbEngineVersionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DbEngineVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DbEngineVersionEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DbEngineVersionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DbEngineVersionEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("DBEngineVersion")
  private DbEngineVersionEnum dbEngineVersion = null;

  @SerializedName("DBRevisionVersion")
  private String dbRevisionVersion = null;

  @SerializedName("InstanceId")
  private String instanceId = null;

  @SerializedName("LowerCaseTableNames")
  private String lowerCaseTableNames = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("RegionId")
  private String regionId = null;

  @SerializedName("Retention")
  private Integer retention = null;

  @SerializedName("TargetRegion")
  private String targetRegion = null;

  @SerializedName("TimeZone")
  private String timeZone = null;

  public InstanceForDescribeCrossRegionBackupDBInstancesOutput crossRegionBackup(Boolean crossRegionBackup) {
    this.crossRegionBackup = crossRegionBackup;
    return this;
  }

   /**
   * Get crossRegionBackup
   * @return crossRegionBackup
  **/
  @Schema(description = "")
  public Boolean isCrossRegionBackup() {
    return crossRegionBackup;
  }

  public void setCrossRegionBackup(Boolean crossRegionBackup) {
    this.crossRegionBackup = crossRegionBackup;
  }

  public InstanceForDescribeCrossRegionBackupDBInstancesOutput dbEngineVersion(DbEngineVersionEnum dbEngineVersion) {
    this.dbEngineVersion = dbEngineVersion;
    return this;
  }

   /**
   * Get dbEngineVersion
   * @return dbEngineVersion
  **/
  @Schema(description = "")
  public DbEngineVersionEnum getDbEngineVersion() {
    return dbEngineVersion;
  }

  public void setDbEngineVersion(DbEngineVersionEnum dbEngineVersion) {
    this.dbEngineVersion = dbEngineVersion;
  }

  public InstanceForDescribeCrossRegionBackupDBInstancesOutput dbRevisionVersion(String dbRevisionVersion) {
    this.dbRevisionVersion = dbRevisionVersion;
    return this;
  }

   /**
   * Get dbRevisionVersion
   * @return dbRevisionVersion
  **/
  @Schema(description = "")
  public String getDbRevisionVersion() {
    return dbRevisionVersion;
  }

  public void setDbRevisionVersion(String dbRevisionVersion) {
    this.dbRevisionVersion = dbRevisionVersion;
  }

  public InstanceForDescribeCrossRegionBackupDBInstancesOutput instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Get instanceId
   * @return instanceId
  **/
  @Schema(description = "")
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }

  public InstanceForDescribeCrossRegionBackupDBInstancesOutput lowerCaseTableNames(String lowerCaseTableNames) {
    this.lowerCaseTableNames = lowerCaseTableNames;
    return this;
  }

   /**
   * Get lowerCaseTableNames
   * @return lowerCaseTableNames
  **/
  @Schema(description = "")
  public String getLowerCaseTableNames() {
    return lowerCaseTableNames;
  }

  public void setLowerCaseTableNames(String lowerCaseTableNames) {
    this.lowerCaseTableNames = lowerCaseTableNames;
  }

  public InstanceForDescribeCrossRegionBackupDBInstancesOutput projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public InstanceForDescribeCrossRegionBackupDBInstancesOutput regionId(String regionId) {
    this.regionId = regionId;
    return this;
  }

   /**
   * Get regionId
   * @return regionId
  **/
  @Schema(description = "")
  public String getRegionId() {
    return regionId;
  }

  public void setRegionId(String regionId) {
    this.regionId = regionId;
  }

  public InstanceForDescribeCrossRegionBackupDBInstancesOutput retention(Integer retention) {
    this.retention = retention;
    return this;
  }

   /**
   * Get retention
   * @return retention
  **/
  @Schema(description = "")
  public Integer getRetention() {
    return retention;
  }

  public void setRetention(Integer retention) {
    this.retention = retention;
  }

  public InstanceForDescribeCrossRegionBackupDBInstancesOutput targetRegion(String targetRegion) {
    this.targetRegion = targetRegion;
    return this;
  }

   /**
   * Get targetRegion
   * @return targetRegion
  **/
  @Schema(description = "")
  public String getTargetRegion() {
    return targetRegion;
  }

  public void setTargetRegion(String targetRegion) {
    this.targetRegion = targetRegion;
  }

  public InstanceForDescribeCrossRegionBackupDBInstancesOutput timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

   /**
   * Get timeZone
   * @return timeZone
  **/
  @Schema(description = "")
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceForDescribeCrossRegionBackupDBInstancesOutput instanceForDescribeCrossRegionBackupDBInstancesOutput = (InstanceForDescribeCrossRegionBackupDBInstancesOutput) o;
    return Objects.equals(this.crossRegionBackup, instanceForDescribeCrossRegionBackupDBInstancesOutput.crossRegionBackup) &&
        Objects.equals(this.dbEngineVersion, instanceForDescribeCrossRegionBackupDBInstancesOutput.dbEngineVersion) &&
        Objects.equals(this.dbRevisionVersion, instanceForDescribeCrossRegionBackupDBInstancesOutput.dbRevisionVersion) &&
        Objects.equals(this.instanceId, instanceForDescribeCrossRegionBackupDBInstancesOutput.instanceId) &&
        Objects.equals(this.lowerCaseTableNames, instanceForDescribeCrossRegionBackupDBInstancesOutput.lowerCaseTableNames) &&
        Objects.equals(this.projectName, instanceForDescribeCrossRegionBackupDBInstancesOutput.projectName) &&
        Objects.equals(this.regionId, instanceForDescribeCrossRegionBackupDBInstancesOutput.regionId) &&
        Objects.equals(this.retention, instanceForDescribeCrossRegionBackupDBInstancesOutput.retention) &&
        Objects.equals(this.targetRegion, instanceForDescribeCrossRegionBackupDBInstancesOutput.targetRegion) &&
        Objects.equals(this.timeZone, instanceForDescribeCrossRegionBackupDBInstancesOutput.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crossRegionBackup, dbEngineVersion, dbRevisionVersion, instanceId, lowerCaseTableNames, projectName, regionId, retention, targetRegion, timeZone);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceForDescribeCrossRegionBackupDBInstancesOutput {\n");
    
    sb.append("    crossRegionBackup: ").append(toIndentedString(crossRegionBackup)).append("\n");
    sb.append("    dbEngineVersion: ").append(toIndentedString(dbEngineVersion)).append("\n");
    sb.append("    dbRevisionVersion: ").append(toIndentedString(dbRevisionVersion)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    lowerCaseTableNames: ").append(toIndentedString(lowerCaseTableNames)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    regionId: ").append(toIndentedString(regionId)).append("\n");
    sb.append("    retention: ").append(toIndentedString(retention)).append("\n");
    sb.append("    targetRegion: ").append(toIndentedString(targetRegion)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
