/*
 * vedbm
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vedbm.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vedbm.model.DatabasesPrivilegeForDescribeDatabasesOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DatabaseForDescribeDatabasesOutput
 */



public class DatabaseForDescribeDatabasesOutput {
  /**
   * Gets or Sets characterSetName
   */
  @JsonAdapter(CharacterSetNameEnum.Adapter.class)
  public enum CharacterSetNameEnum {
    @SerializedName("ascii")
    ASCII("ascii"),
    @SerializedName("latin1")
    LATIN1("latin1"),
    @SerializedName("utf8")
    UTF8("utf8"),
    @SerializedName("utf8mb4")
    UTF8MB4("utf8mb4");

    private String value;

    CharacterSetNameEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CharacterSetNameEnum fromValue(String input) {
      for (CharacterSetNameEnum b : CharacterSetNameEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CharacterSetNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CharacterSetNameEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public CharacterSetNameEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return CharacterSetNameEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("CharacterSetName")
  private CharacterSetNameEnum characterSetName = null;

  @SerializedName("DBDesc")
  private String dbDesc = null;

  @SerializedName("DBName")
  private String dbName = null;

  @SerializedName("DatabasesPrivileges")
  private List<DatabasesPrivilegeForDescribeDatabasesOutput> databasesPrivileges = null;

  public DatabaseForDescribeDatabasesOutput characterSetName(CharacterSetNameEnum characterSetName) {
    this.characterSetName = characterSetName;
    return this;
  }

   /**
   * Get characterSetName
   * @return characterSetName
  **/
  @Schema(description = "")
  public CharacterSetNameEnum getCharacterSetName() {
    return characterSetName;
  }

  public void setCharacterSetName(CharacterSetNameEnum characterSetName) {
    this.characterSetName = characterSetName;
  }

  public DatabaseForDescribeDatabasesOutput dbDesc(String dbDesc) {
    this.dbDesc = dbDesc;
    return this;
  }

   /**
   * Get dbDesc
   * @return dbDesc
  **/
  @Schema(description = "")
  public String getDbDesc() {
    return dbDesc;
  }

  public void setDbDesc(String dbDesc) {
    this.dbDesc = dbDesc;
  }

  public DatabaseForDescribeDatabasesOutput dbName(String dbName) {
    this.dbName = dbName;
    return this;
  }

   /**
   * Get dbName
   * @return dbName
  **/
  @Schema(description = "")
  public String getDbName() {
    return dbName;
  }

  public void setDbName(String dbName) {
    this.dbName = dbName;
  }

  public DatabaseForDescribeDatabasesOutput databasesPrivileges(List<DatabasesPrivilegeForDescribeDatabasesOutput> databasesPrivileges) {
    this.databasesPrivileges = databasesPrivileges;
    return this;
  }

  public DatabaseForDescribeDatabasesOutput addDatabasesPrivilegesItem(DatabasesPrivilegeForDescribeDatabasesOutput databasesPrivilegesItem) {
    if (this.databasesPrivileges == null) {
      this.databasesPrivileges = new ArrayList<DatabasesPrivilegeForDescribeDatabasesOutput>();
    }
    this.databasesPrivileges.add(databasesPrivilegesItem);
    return this;
  }

   /**
   * Get databasesPrivileges
   * @return databasesPrivileges
  **/
  @Valid
  @Schema(description = "")
  public List<DatabasesPrivilegeForDescribeDatabasesOutput> getDatabasesPrivileges() {
    return databasesPrivileges;
  }

  public void setDatabasesPrivileges(List<DatabasesPrivilegeForDescribeDatabasesOutput> databasesPrivileges) {
    this.databasesPrivileges = databasesPrivileges;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseForDescribeDatabasesOutput databaseForDescribeDatabasesOutput = (DatabaseForDescribeDatabasesOutput) o;
    return Objects.equals(this.characterSetName, databaseForDescribeDatabasesOutput.characterSetName) &&
        Objects.equals(this.dbDesc, databaseForDescribeDatabasesOutput.dbDesc) &&
        Objects.equals(this.dbName, databaseForDescribeDatabasesOutput.dbName) &&
        Objects.equals(this.databasesPrivileges, databaseForDescribeDatabasesOutput.databasesPrivileges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(characterSetName, dbDesc, dbName, databasesPrivileges);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseForDescribeDatabasesOutput {\n");
    
    sb.append("    characterSetName: ").append(toIndentedString(characterSetName)).append("\n");
    sb.append("    dbDesc: ").append(toIndentedString(dbDesc)).append("\n");
    sb.append("    dbName: ").append(toIndentedString(dbName)).append("\n");
    sb.append("    databasesPrivileges: ").append(toIndentedString(databasesPrivileges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
