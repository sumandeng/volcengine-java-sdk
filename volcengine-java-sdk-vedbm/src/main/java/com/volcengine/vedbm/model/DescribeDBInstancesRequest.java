/*
 * vedbm
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vedbm.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vedbm.model.TagFilterForDescribeDBInstancesInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DescribeDBInstancesRequest
 */



public class DescribeDBInstancesRequest {
  /**
   * Gets or Sets chargeType
   */
  @JsonAdapter(ChargeTypeEnum.Adapter.class)
  public enum ChargeTypeEnum {
    @SerializedName("PostPaid")
    POSTPAID("PostPaid"),
    @SerializedName("PrePaid")
    PREPAID("PrePaid");

    private String value;

    ChargeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ChargeTypeEnum fromValue(String input) {
      for (ChargeTypeEnum b : ChargeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ChargeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargeTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ChargeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ChargeTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ChargeType")
  private ChargeTypeEnum chargeType = null;

  @SerializedName("CreateTimeEnd")
  private String createTimeEnd = null;

  @SerializedName("CreateTimeStart")
  private String createTimeStart = null;

  /**
   * Gets or Sets dbEngineVersion
   */
  @JsonAdapter(DbEngineVersionEnum.Adapter.class)
  public enum DbEngineVersionEnum {
    @SerializedName("MySQL_5_7")
    MYSQL_5_7("MySQL_5_7"),
    @SerializedName("MySQL_8_0")
    MYSQL_8_0("MySQL_8_0");

    private String value;

    DbEngineVersionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DbEngineVersionEnum fromValue(String input) {
      for (DbEngineVersionEnum b : DbEngineVersionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DbEngineVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DbEngineVersionEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DbEngineVersionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DbEngineVersionEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("DBEngineVersion")
  private DbEngineVersionEnum dbEngineVersion = null;

  @SerializedName("InstanceId")
  private String instanceId = null;

  @SerializedName("InstanceName")
  private String instanceName = null;

  /**
   * Gets or Sets instanceStatus
   */
  @JsonAdapter(InstanceStatusEnum.Adapter.class)
  public enum InstanceStatusEnum {
    @SerializedName("AddressModifying")
    ADDRESSMODIFYING("AddressModifying"),
    @SerializedName("AllowListMaintaining")
    ALLOWLISTMAINTAINING("AllowListMaintaining"),
    @SerializedName("CreateFailed")
    CREATEFAILED("CreateFailed"),
    @SerializedName("Creating")
    CREATING("Creating"),
    @SerializedName("Deleting")
    DELETING("Deleting"),
    @SerializedName("Error")
    ERROR("Error"),
    @SerializedName("Expired")
    EXPIRED("Expired"),
    @SerializedName("Owing")
    OWING("Owing"),
    @SerializedName("PrimaryChanging")
    PRIMARYCHANGING("PrimaryChanging"),
    @SerializedName("Reclaiming")
    RECLAIMING("Reclaiming"),
    @SerializedName("Restarting")
    RESTARTING("Restarting"),
    @SerializedName("Restoring")
    RESTORING("Restoring"),
    @SerializedName("Resuming")
    RESUMING("Resuming"),
    @SerializedName("Running")
    RUNNING("Running"),
    @SerializedName("Scaling")
    SCALING("Scaling"),
    @SerializedName("Upgrading")
    UPGRADING("Upgrading"),
    @SerializedName("WaitingPaid")
    WAITINGPAID("WaitingPaid");

    private String value;

    InstanceStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static InstanceStatusEnum fromValue(String input) {
      for (InstanceStatusEnum b : InstanceStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<InstanceStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstanceStatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public InstanceStatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return InstanceStatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("InstanceStatus")
  private InstanceStatusEnum instanceStatus = null;

  /**
   * Gets or Sets nodeSpec
   */
  @JsonAdapter(NodeSpecEnum.Adapter.class)
  public enum NodeSpecEnum {
    @SerializedName("vedb.mysql.g4.2xlarge")
    VEDB_MYSQL_G4_2XLARGE("vedb.mysql.g4.2xlarge"),
    @SerializedName("vedb.mysql.g4.4xlarge")
    VEDB_MYSQL_G4_4XLARGE("vedb.mysql.g4.4xlarge"),
    @SerializedName("vedb.mysql.g4.large")
    VEDB_MYSQL_G4_LARGE("vedb.mysql.g4.large"),
    @SerializedName("vedb.mysql.g4.xlarge")
    VEDB_MYSQL_G4_XLARGE("vedb.mysql.g4.xlarge"),
    @SerializedName("vedb.mysql.g8.2xlarge")
    VEDB_MYSQL_G8_2XLARGE("vedb.mysql.g8.2xlarge"),
    @SerializedName("vedb.mysql.x4.2xlarge")
    VEDB_MYSQL_X4_2XLARGE("vedb.mysql.x4.2xlarge"),
    @SerializedName("vedb.mysql.x4.4xlarge")
    VEDB_MYSQL_X4_4XLARGE("vedb.mysql.x4.4xlarge"),
    @SerializedName("vedb.mysql.x4.8xlarge")
    VEDB_MYSQL_X4_8XLARGE("vedb.mysql.x4.8xlarge"),
    @SerializedName("vedb.mysql.x4.large")
    VEDB_MYSQL_X4_LARGE("vedb.mysql.x4.large"),
    @SerializedName("vedb.mysql.x4.xlarge")
    VEDB_MYSQL_X4_XLARGE("vedb.mysql.x4.xlarge"),
    @SerializedName("vedb.mysql.x8.2xlarge")
    VEDB_MYSQL_X8_2XLARGE("vedb.mysql.x8.2xlarge"),
    @SerializedName("vedb.mysql.x8.4xlarge")
    VEDB_MYSQL_X8_4XLARGE("vedb.mysql.x8.4xlarge"),
    @SerializedName("vedb.mysql.x8.6xlarge")
    VEDB_MYSQL_X8_6XLARGE("vedb.mysql.x8.6xlarge"),
    @SerializedName("vedb.mysql.x8.8xlarge")
    VEDB_MYSQL_X8_8XLARGE("vedb.mysql.x8.8xlarge"),
    @SerializedName("vedb.mysql.x8.large")
    VEDB_MYSQL_X8_LARGE("vedb.mysql.x8.large"),
    @SerializedName("vedb.mysql.x8.xlarge")
    VEDB_MYSQL_X8_XLARGE("vedb.mysql.x8.xlarge");

    private String value;

    NodeSpecEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static NodeSpecEnum fromValue(String input) {
      for (NodeSpecEnum b : NodeSpecEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<NodeSpecEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NodeSpecEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public NodeSpecEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return NodeSpecEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("NodeSpec")
  private NodeSpecEnum nodeSpec = null;

  @SerializedName("PageNumber")
  private Integer pageNumber = null;

  @SerializedName("PageSize")
  private Integer pageSize = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  /**
   * Gets or Sets storageChargeType
   */
  @JsonAdapter(StorageChargeTypeEnum.Adapter.class)
  public enum StorageChargeTypeEnum {
    @SerializedName("PostPaid")
    POSTPAID("PostPaid"),
    @SerializedName("PrePaid")
    PREPAID("PrePaid");

    private String value;

    StorageChargeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StorageChargeTypeEnum fromValue(String input) {
      for (StorageChargeTypeEnum b : StorageChargeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StorageChargeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageChargeTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StorageChargeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StorageChargeTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("StorageChargeType")
  private StorageChargeTypeEnum storageChargeType = null;

  @SerializedName("TagFilters")
  private List<TagFilterForDescribeDBInstancesInput> tagFilters = null;

  @SerializedName("ZoneId")
  private String zoneId = null;

  public DescribeDBInstancesRequest chargeType(ChargeTypeEnum chargeType) {
    this.chargeType = chargeType;
    return this;
  }

   /**
   * Get chargeType
   * @return chargeType
  **/
  @Schema(description = "")
  public ChargeTypeEnum getChargeType() {
    return chargeType;
  }

  public void setChargeType(ChargeTypeEnum chargeType) {
    this.chargeType = chargeType;
  }

  public DescribeDBInstancesRequest createTimeEnd(String createTimeEnd) {
    this.createTimeEnd = createTimeEnd;
    return this;
  }

   /**
   * Get createTimeEnd
   * @return createTimeEnd
  **/
  @Schema(description = "")
  public String getCreateTimeEnd() {
    return createTimeEnd;
  }

  public void setCreateTimeEnd(String createTimeEnd) {
    this.createTimeEnd = createTimeEnd;
  }

  public DescribeDBInstancesRequest createTimeStart(String createTimeStart) {
    this.createTimeStart = createTimeStart;
    return this;
  }

   /**
   * Get createTimeStart
   * @return createTimeStart
  **/
  @Schema(description = "")
  public String getCreateTimeStart() {
    return createTimeStart;
  }

  public void setCreateTimeStart(String createTimeStart) {
    this.createTimeStart = createTimeStart;
  }

  public DescribeDBInstancesRequest dbEngineVersion(DbEngineVersionEnum dbEngineVersion) {
    this.dbEngineVersion = dbEngineVersion;
    return this;
  }

   /**
   * Get dbEngineVersion
   * @return dbEngineVersion
  **/
  @Schema(description = "")
  public DbEngineVersionEnum getDbEngineVersion() {
    return dbEngineVersion;
  }

  public void setDbEngineVersion(DbEngineVersionEnum dbEngineVersion) {
    this.dbEngineVersion = dbEngineVersion;
  }

  public DescribeDBInstancesRequest instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Get instanceId
   * @return instanceId
  **/
  @Schema(description = "")
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }

  public DescribeDBInstancesRequest instanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

   /**
   * Get instanceName
   * @return instanceName
  **/
  @Schema(description = "")
  public String getInstanceName() {
    return instanceName;
  }

  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }

  public DescribeDBInstancesRequest instanceStatus(InstanceStatusEnum instanceStatus) {
    this.instanceStatus = instanceStatus;
    return this;
  }

   /**
   * Get instanceStatus
   * @return instanceStatus
  **/
  @Schema(description = "")
  public InstanceStatusEnum getInstanceStatus() {
    return instanceStatus;
  }

  public void setInstanceStatus(InstanceStatusEnum instanceStatus) {
    this.instanceStatus = instanceStatus;
  }

  public DescribeDBInstancesRequest nodeSpec(NodeSpecEnum nodeSpec) {
    this.nodeSpec = nodeSpec;
    return this;
  }

   /**
   * Get nodeSpec
   * @return nodeSpec
  **/
  @Schema(description = "")
  public NodeSpecEnum getNodeSpec() {
    return nodeSpec;
  }

  public void setNodeSpec(NodeSpecEnum nodeSpec) {
    this.nodeSpec = nodeSpec;
  }

  public DescribeDBInstancesRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * @return pageNumber
  **/
  @Schema(description = "")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public DescribeDBInstancesRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public DescribeDBInstancesRequest projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public DescribeDBInstancesRequest storageChargeType(StorageChargeTypeEnum storageChargeType) {
    this.storageChargeType = storageChargeType;
    return this;
  }

   /**
   * Get storageChargeType
   * @return storageChargeType
  **/
  @Schema(description = "")
  public StorageChargeTypeEnum getStorageChargeType() {
    return storageChargeType;
  }

  public void setStorageChargeType(StorageChargeTypeEnum storageChargeType) {
    this.storageChargeType = storageChargeType;
  }

  public DescribeDBInstancesRequest tagFilters(List<TagFilterForDescribeDBInstancesInput> tagFilters) {
    this.tagFilters = tagFilters;
    return this;
  }

  public DescribeDBInstancesRequest addTagFiltersItem(TagFilterForDescribeDBInstancesInput tagFiltersItem) {
    if (this.tagFilters == null) {
      this.tagFilters = new ArrayList<TagFilterForDescribeDBInstancesInput>();
    }
    this.tagFilters.add(tagFiltersItem);
    return this;
  }

   /**
   * Get tagFilters
   * @return tagFilters
  **/
  @Valid
  @Schema(description = "")
  public List<TagFilterForDescribeDBInstancesInput> getTagFilters() {
    return tagFilters;
  }

  public void setTagFilters(List<TagFilterForDescribeDBInstancesInput> tagFilters) {
    this.tagFilters = tagFilters;
  }

  public DescribeDBInstancesRequest zoneId(String zoneId) {
    this.zoneId = zoneId;
    return this;
  }

   /**
   * Get zoneId
   * @return zoneId
  **/
  @Schema(description = "")
  public String getZoneId() {
    return zoneId;
  }

  public void setZoneId(String zoneId) {
    this.zoneId = zoneId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDBInstancesRequest describeDBInstancesRequest = (DescribeDBInstancesRequest) o;
    return Objects.equals(this.chargeType, describeDBInstancesRequest.chargeType) &&
        Objects.equals(this.createTimeEnd, describeDBInstancesRequest.createTimeEnd) &&
        Objects.equals(this.createTimeStart, describeDBInstancesRequest.createTimeStart) &&
        Objects.equals(this.dbEngineVersion, describeDBInstancesRequest.dbEngineVersion) &&
        Objects.equals(this.instanceId, describeDBInstancesRequest.instanceId) &&
        Objects.equals(this.instanceName, describeDBInstancesRequest.instanceName) &&
        Objects.equals(this.instanceStatus, describeDBInstancesRequest.instanceStatus) &&
        Objects.equals(this.nodeSpec, describeDBInstancesRequest.nodeSpec) &&
        Objects.equals(this.pageNumber, describeDBInstancesRequest.pageNumber) &&
        Objects.equals(this.pageSize, describeDBInstancesRequest.pageSize) &&
        Objects.equals(this.projectName, describeDBInstancesRequest.projectName) &&
        Objects.equals(this.storageChargeType, describeDBInstancesRequest.storageChargeType) &&
        Objects.equals(this.tagFilters, describeDBInstancesRequest.tagFilters) &&
        Objects.equals(this.zoneId, describeDBInstancesRequest.zoneId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chargeType, createTimeEnd, createTimeStart, dbEngineVersion, instanceId, instanceName, instanceStatus, nodeSpec, pageNumber, pageSize, projectName, storageChargeType, tagFilters, zoneId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDBInstancesRequest {\n");
    
    sb.append("    chargeType: ").append(toIndentedString(chargeType)).append("\n");
    sb.append("    createTimeEnd: ").append(toIndentedString(createTimeEnd)).append("\n");
    sb.append("    createTimeStart: ").append(toIndentedString(createTimeStart)).append("\n");
    sb.append("    dbEngineVersion: ").append(toIndentedString(dbEngineVersion)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    instanceStatus: ").append(toIndentedString(instanceStatus)).append("\n");
    sb.append("    nodeSpec: ").append(toIndentedString(nodeSpec)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    storageChargeType: ").append(toIndentedString(storageChargeType)).append("\n");
    sb.append("    tagFilters: ").append(toIndentedString(tagFilters)).append("\n");
    sb.append("    zoneId: ").append(toIndentedString(zoneId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
