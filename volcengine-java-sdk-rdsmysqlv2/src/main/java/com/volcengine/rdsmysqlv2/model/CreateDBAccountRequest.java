/*
 * rds_mysql_v2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.rdsmysqlv2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.rdsmysqlv2.model.AccountPrivilegeForCreateDBAccountInput;
import com.volcengine.rdsmysqlv2.model.TableColumnPrivilegeForCreateDBAccountInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateDBAccountRequest
 */



public class CreateDBAccountRequest {
  @SerializedName("AccountDesc")
  private String accountDesc = null;

  @SerializedName("AccountName")
  private String accountName = null;

  @SerializedName("AccountPassword")
  private String accountPassword = null;

  @SerializedName("AccountPrivileges")
  private List<AccountPrivilegeForCreateDBAccountInput> accountPrivileges = null;

  @SerializedName("AccountType")
  private String accountType = null;

  @SerializedName("DryRun")
  private Boolean dryRun = null;

  @SerializedName("Host")
  private String host = null;

  @SerializedName("InstanceId")
  private String instanceId = null;

  @SerializedName("TableColumnPrivileges")
  private List<TableColumnPrivilegeForCreateDBAccountInput> tableColumnPrivileges = null;

  public CreateDBAccountRequest accountDesc(String accountDesc) {
    this.accountDesc = accountDesc;
    return this;
  }

   /**
   * Get accountDesc
   * @return accountDesc
  **/
  @Schema(description = "")
  public String getAccountDesc() {
    return accountDesc;
  }

  public void setAccountDesc(String accountDesc) {
    this.accountDesc = accountDesc;
  }

  public CreateDBAccountRequest accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

   /**
   * Get accountName
   * @return accountName
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }

  public CreateDBAccountRequest accountPassword(String accountPassword) {
    this.accountPassword = accountPassword;
    return this;
  }

   /**
   * Get accountPassword
   * @return accountPassword
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getAccountPassword() {
    return accountPassword;
  }

  public void setAccountPassword(String accountPassword) {
    this.accountPassword = accountPassword;
  }

  public CreateDBAccountRequest accountPrivileges(List<AccountPrivilegeForCreateDBAccountInput> accountPrivileges) {
    this.accountPrivileges = accountPrivileges;
    return this;
  }

  public CreateDBAccountRequest addAccountPrivilegesItem(AccountPrivilegeForCreateDBAccountInput accountPrivilegesItem) {
    if (this.accountPrivileges == null) {
      this.accountPrivileges = new ArrayList<AccountPrivilegeForCreateDBAccountInput>();
    }
    this.accountPrivileges.add(accountPrivilegesItem);
    return this;
  }

   /**
   * Get accountPrivileges
   * @return accountPrivileges
  **/
  @Valid
  @Schema(description = "")
  public List<AccountPrivilegeForCreateDBAccountInput> getAccountPrivileges() {
    return accountPrivileges;
  }

  public void setAccountPrivileges(List<AccountPrivilegeForCreateDBAccountInput> accountPrivileges) {
    this.accountPrivileges = accountPrivileges;
  }

  public CreateDBAccountRequest accountType(String accountType) {
    this.accountType = accountType;
    return this;
  }

   /**
   * Get accountType
   * @return accountType
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getAccountType() {
    return accountType;
  }

  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }

  public CreateDBAccountRequest dryRun(Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

   /**
   * Get dryRun
   * @return dryRun
  **/
  @Schema(description = "")
  public Boolean isDryRun() {
    return dryRun;
  }

  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }

  public CreateDBAccountRequest host(String host) {
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @Schema(description = "")
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }

  public CreateDBAccountRequest instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Get instanceId
   * @return instanceId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }

  public CreateDBAccountRequest tableColumnPrivileges(List<TableColumnPrivilegeForCreateDBAccountInput> tableColumnPrivileges) {
    this.tableColumnPrivileges = tableColumnPrivileges;
    return this;
  }

  public CreateDBAccountRequest addTableColumnPrivilegesItem(TableColumnPrivilegeForCreateDBAccountInput tableColumnPrivilegesItem) {
    if (this.tableColumnPrivileges == null) {
      this.tableColumnPrivileges = new ArrayList<TableColumnPrivilegeForCreateDBAccountInput>();
    }
    this.tableColumnPrivileges.add(tableColumnPrivilegesItem);
    return this;
  }

   /**
   * Get tableColumnPrivileges
   * @return tableColumnPrivileges
  **/
  @Valid
  @Schema(description = "")
  public List<TableColumnPrivilegeForCreateDBAccountInput> getTableColumnPrivileges() {
    return tableColumnPrivileges;
  }

  public void setTableColumnPrivileges(List<TableColumnPrivilegeForCreateDBAccountInput> tableColumnPrivileges) {
    this.tableColumnPrivileges = tableColumnPrivileges;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDBAccountRequest createDBAccountRequest = (CreateDBAccountRequest) o;
    return Objects.equals(this.accountDesc, createDBAccountRequest.accountDesc) &&
        Objects.equals(this.accountName, createDBAccountRequest.accountName) &&
        Objects.equals(this.accountPassword, createDBAccountRequest.accountPassword) &&
        Objects.equals(this.accountPrivileges, createDBAccountRequest.accountPrivileges) &&
        Objects.equals(this.accountType, createDBAccountRequest.accountType) &&
        Objects.equals(this.dryRun, createDBAccountRequest.dryRun) &&
        Objects.equals(this.host, createDBAccountRequest.host) &&
        Objects.equals(this.instanceId, createDBAccountRequest.instanceId) &&
        Objects.equals(this.tableColumnPrivileges, createDBAccountRequest.tableColumnPrivileges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountDesc, accountName, accountPassword, accountPrivileges, accountType, dryRun, host, instanceId, tableColumnPrivileges);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDBAccountRequest {\n");
    
    sb.append("    accountDesc: ").append(toIndentedString(accountDesc)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountPassword: ").append(toIndentedString(accountPassword)).append("\n");
    sb.append("    accountPrivileges: ").append(toIndentedString(accountPrivileges)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    tableColumnPrivileges: ").append(toIndentedString(tableColumnPrivileges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
