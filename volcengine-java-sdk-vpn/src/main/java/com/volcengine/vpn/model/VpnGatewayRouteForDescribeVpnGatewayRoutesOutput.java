/*
 * vpn
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vpn.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vpn.model.AsPathForDescribeVpnGatewayRoutesOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * VpnGatewayRouteForDescribeVpnGatewayRoutesOutput
 */



public class VpnGatewayRouteForDescribeVpnGatewayRoutesOutput {
  @SerializedName("AsPath")
  private List<AsPathForDescribeVpnGatewayRoutesOutput> asPath = null;

  @SerializedName("CreationTime")
  private String creationTime = null;

  @SerializedName("DestinationCidrBlock")
  private String destinationCidrBlock = null;

  @SerializedName("NextHopId")
  private String nextHopId = null;

  @SerializedName("NextTunnelId")
  private String nextTunnelId = null;

  /**
   * Gets or Sets routeType
   */
  @JsonAdapter(RouteTypeEnum.Adapter.class)
  public enum RouteTypeEnum {
    @SerializedName("BGP")
    BGP("BGP"),
    @SerializedName(" Static")
    _STATIC(" Static"),
    @SerializedName(" Cloud")
    _CLOUD(" Cloud");

    private String value;

    RouteTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RouteTypeEnum fromValue(String input) {
      for (RouteTypeEnum b : RouteTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RouteTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RouteTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RouteTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RouteTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("RouteType")
  private RouteTypeEnum routeType = null;

  @SerializedName("Status")
  private String status = null;

  @SerializedName("UpdateTime")
  private String updateTime = null;

  @SerializedName("VpnGatewayId")
  private String vpnGatewayId = null;

  @SerializedName("VpnGatewayRouteId")
  private String vpnGatewayRouteId = null;

  public VpnGatewayRouteForDescribeVpnGatewayRoutesOutput asPath(List<AsPathForDescribeVpnGatewayRoutesOutput> asPath) {
    this.asPath = asPath;
    return this;
  }

  public VpnGatewayRouteForDescribeVpnGatewayRoutesOutput addAsPathItem(AsPathForDescribeVpnGatewayRoutesOutput asPathItem) {
    if (this.asPath == null) {
      this.asPath = new ArrayList<AsPathForDescribeVpnGatewayRoutesOutput>();
    }
    this.asPath.add(asPathItem);
    return this;
  }

   /**
   * Get asPath
   * @return asPath
  **/
  @Valid
  @Schema(description = "")
  public List<AsPathForDescribeVpnGatewayRoutesOutput> getAsPath() {
    return asPath;
  }

  public void setAsPath(List<AsPathForDescribeVpnGatewayRoutesOutput> asPath) {
    this.asPath = asPath;
  }

  public VpnGatewayRouteForDescribeVpnGatewayRoutesOutput creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

   /**
   * Get creationTime
   * @return creationTime
  **/
  @Schema(description = "")
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }

  public VpnGatewayRouteForDescribeVpnGatewayRoutesOutput destinationCidrBlock(String destinationCidrBlock) {
    this.destinationCidrBlock = destinationCidrBlock;
    return this;
  }

   /**
   * Get destinationCidrBlock
   * @return destinationCidrBlock
  **/
  @Schema(description = "")
  public String getDestinationCidrBlock() {
    return destinationCidrBlock;
  }

  public void setDestinationCidrBlock(String destinationCidrBlock) {
    this.destinationCidrBlock = destinationCidrBlock;
  }

  public VpnGatewayRouteForDescribeVpnGatewayRoutesOutput nextHopId(String nextHopId) {
    this.nextHopId = nextHopId;
    return this;
  }

   /**
   * Get nextHopId
   * @return nextHopId
  **/
  @Schema(description = "")
  public String getNextHopId() {
    return nextHopId;
  }

  public void setNextHopId(String nextHopId) {
    this.nextHopId = nextHopId;
  }

  public VpnGatewayRouteForDescribeVpnGatewayRoutesOutput nextTunnelId(String nextTunnelId) {
    this.nextTunnelId = nextTunnelId;
    return this;
  }

   /**
   * Get nextTunnelId
   * @return nextTunnelId
  **/
  @Schema(description = "")
  public String getNextTunnelId() {
    return nextTunnelId;
  }

  public void setNextTunnelId(String nextTunnelId) {
    this.nextTunnelId = nextTunnelId;
  }

  public VpnGatewayRouteForDescribeVpnGatewayRoutesOutput routeType(RouteTypeEnum routeType) {
    this.routeType = routeType;
    return this;
  }

   /**
   * Get routeType
   * @return routeType
  **/
  @Schema(description = "")
  public RouteTypeEnum getRouteType() {
    return routeType;
  }

  public void setRouteType(RouteTypeEnum routeType) {
    this.routeType = routeType;
  }

  public VpnGatewayRouteForDescribeVpnGatewayRoutesOutput status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public VpnGatewayRouteForDescribeVpnGatewayRoutesOutput updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }

  public VpnGatewayRouteForDescribeVpnGatewayRoutesOutput vpnGatewayId(String vpnGatewayId) {
    this.vpnGatewayId = vpnGatewayId;
    return this;
  }

   /**
   * Get vpnGatewayId
   * @return vpnGatewayId
  **/
  @Schema(description = "")
  public String getVpnGatewayId() {
    return vpnGatewayId;
  }

  public void setVpnGatewayId(String vpnGatewayId) {
    this.vpnGatewayId = vpnGatewayId;
  }

  public VpnGatewayRouteForDescribeVpnGatewayRoutesOutput vpnGatewayRouteId(String vpnGatewayRouteId) {
    this.vpnGatewayRouteId = vpnGatewayRouteId;
    return this;
  }

   /**
   * Get vpnGatewayRouteId
   * @return vpnGatewayRouteId
  **/
  @Schema(description = "")
  public String getVpnGatewayRouteId() {
    return vpnGatewayRouteId;
  }

  public void setVpnGatewayRouteId(String vpnGatewayRouteId) {
    this.vpnGatewayRouteId = vpnGatewayRouteId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VpnGatewayRouteForDescribeVpnGatewayRoutesOutput vpnGatewayRouteForDescribeVpnGatewayRoutesOutput = (VpnGatewayRouteForDescribeVpnGatewayRoutesOutput) o;
    return Objects.equals(this.asPath, vpnGatewayRouteForDescribeVpnGatewayRoutesOutput.asPath) &&
        Objects.equals(this.creationTime, vpnGatewayRouteForDescribeVpnGatewayRoutesOutput.creationTime) &&
        Objects.equals(this.destinationCidrBlock, vpnGatewayRouteForDescribeVpnGatewayRoutesOutput.destinationCidrBlock) &&
        Objects.equals(this.nextHopId, vpnGatewayRouteForDescribeVpnGatewayRoutesOutput.nextHopId) &&
        Objects.equals(this.nextTunnelId, vpnGatewayRouteForDescribeVpnGatewayRoutesOutput.nextTunnelId) &&
        Objects.equals(this.routeType, vpnGatewayRouteForDescribeVpnGatewayRoutesOutput.routeType) &&
        Objects.equals(this.status, vpnGatewayRouteForDescribeVpnGatewayRoutesOutput.status) &&
        Objects.equals(this.updateTime, vpnGatewayRouteForDescribeVpnGatewayRoutesOutput.updateTime) &&
        Objects.equals(this.vpnGatewayId, vpnGatewayRouteForDescribeVpnGatewayRoutesOutput.vpnGatewayId) &&
        Objects.equals(this.vpnGatewayRouteId, vpnGatewayRouteForDescribeVpnGatewayRoutesOutput.vpnGatewayRouteId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asPath, creationTime, destinationCidrBlock, nextHopId, nextTunnelId, routeType, status, updateTime, vpnGatewayId, vpnGatewayRouteId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VpnGatewayRouteForDescribeVpnGatewayRoutesOutput {\n");
    
    sb.append("    asPath: ").append(toIndentedString(asPath)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    destinationCidrBlock: ").append(toIndentedString(destinationCidrBlock)).append("\n");
    sb.append("    nextHopId: ").append(toIndentedString(nextHopId)).append("\n");
    sb.append("    nextTunnelId: ").append(toIndentedString(nextTunnelId)).append("\n");
    sb.append("    routeType: ").append(toIndentedString(routeType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    vpnGatewayId: ").append(toIndentedString(vpnGatewayId)).append("\n");
    sb.append("    vpnGatewayRouteId: ").append(toIndentedString(vpnGatewayRouteId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
