/*
 * vke
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vke.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * FilterForListPermissionsInput
 */



public class FilterForListPermissionsInput {
  @SerializedName("ClusterIds")
  private List<String> clusterIds = null;

  @SerializedName("GranteeIds")
  private List<Integer> granteeIds = null;

  /**
   * Gets or Sets granteeType
   */
  @JsonAdapter(GranteeTypeEnum.Adapter.class)
  public enum GranteeTypeEnum {
    @SerializedName("User")
    USER("User"),
    @SerializedName("Role")
    ROLE("Role"),
    @SerializedName("Account")
    ACCOUNT("Account");

    private String value;

    GranteeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static GranteeTypeEnum fromValue(String input) {
      for (GranteeTypeEnum b : GranteeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<GranteeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GranteeTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public GranteeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return GranteeTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("GranteeType")
  private GranteeTypeEnum granteeType = null;

  @SerializedName("Ids")
  private List<String> ids = null;

  @SerializedName("Namespaces")
  private List<String> namespaces = null;

  @SerializedName("RoleNames")
  private List<String> roleNames = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("Pending")
    PENDING("Pending"),
    @SerializedName("PartialSuccess")
    PARTIALSUCCESS("PartialSuccess"),
    @SerializedName("Success")
    SUCCESS("Success"),
    @SerializedName("Failed")
    FAILED("Failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Status")
  private StatusEnum status = null;

  public FilterForListPermissionsInput clusterIds(List<String> clusterIds) {
    this.clusterIds = clusterIds;
    return this;
  }

  public FilterForListPermissionsInput addClusterIdsItem(String clusterIdsItem) {
    if (this.clusterIds == null) {
      this.clusterIds = new ArrayList<String>();
    }
    this.clusterIds.add(clusterIdsItem);
    return this;
  }

   /**
   * Get clusterIds
   * @return clusterIds
  **/
  @Schema(description = "")
  public List<String> getClusterIds() {
    return clusterIds;
  }

  public void setClusterIds(List<String> clusterIds) {
    this.clusterIds = clusterIds;
  }

  public FilterForListPermissionsInput granteeIds(List<Integer> granteeIds) {
    this.granteeIds = granteeIds;
    return this;
  }

  public FilterForListPermissionsInput addGranteeIdsItem(Integer granteeIdsItem) {
    if (this.granteeIds == null) {
      this.granteeIds = new ArrayList<Integer>();
    }
    this.granteeIds.add(granteeIdsItem);
    return this;
  }

   /**
   * Get granteeIds
   * @return granteeIds
  **/
  @Schema(description = "")
  public List<Integer> getGranteeIds() {
    return granteeIds;
  }

  public void setGranteeIds(List<Integer> granteeIds) {
    this.granteeIds = granteeIds;
  }

  public FilterForListPermissionsInput granteeType(GranteeTypeEnum granteeType) {
    this.granteeType = granteeType;
    return this;
  }

   /**
   * Get granteeType
   * @return granteeType
  **/
  @Schema(description = "")
  public GranteeTypeEnum getGranteeType() {
    return granteeType;
  }

  public void setGranteeType(GranteeTypeEnum granteeType) {
    this.granteeType = granteeType;
  }

  public FilterForListPermissionsInput ids(List<String> ids) {
    this.ids = ids;
    return this;
  }

  public FilterForListPermissionsInput addIdsItem(String idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<String>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Get ids
   * @return ids
  **/
  @Schema(description = "")
  public List<String> getIds() {
    return ids;
  }

  public void setIds(List<String> ids) {
    this.ids = ids;
  }

  public FilterForListPermissionsInput namespaces(List<String> namespaces) {
    this.namespaces = namespaces;
    return this;
  }

  public FilterForListPermissionsInput addNamespacesItem(String namespacesItem) {
    if (this.namespaces == null) {
      this.namespaces = new ArrayList<String>();
    }
    this.namespaces.add(namespacesItem);
    return this;
  }

   /**
   * Get namespaces
   * @return namespaces
  **/
  @Schema(description = "")
  public List<String> getNamespaces() {
    return namespaces;
  }

  public void setNamespaces(List<String> namespaces) {
    this.namespaces = namespaces;
  }

  public FilterForListPermissionsInput roleNames(List<String> roleNames) {
    this.roleNames = roleNames;
    return this;
  }

  public FilterForListPermissionsInput addRoleNamesItem(String roleNamesItem) {
    if (this.roleNames == null) {
      this.roleNames = new ArrayList<String>();
    }
    this.roleNames.add(roleNamesItem);
    return this;
  }

   /**
   * Get roleNames
   * @return roleNames
  **/
  @Schema(description = "")
  public List<String> getRoleNames() {
    return roleNames;
  }

  public void setRoleNames(List<String> roleNames) {
    this.roleNames = roleNames;
  }

  public FilterForListPermissionsInput status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterForListPermissionsInput filterForListPermissionsInput = (FilterForListPermissionsInput) o;
    return Objects.equals(this.clusterIds, filterForListPermissionsInput.clusterIds) &&
        Objects.equals(this.granteeIds, filterForListPermissionsInput.granteeIds) &&
        Objects.equals(this.granteeType, filterForListPermissionsInput.granteeType) &&
        Objects.equals(this.ids, filterForListPermissionsInput.ids) &&
        Objects.equals(this.namespaces, filterForListPermissionsInput.namespaces) &&
        Objects.equals(this.roleNames, filterForListPermissionsInput.roleNames) &&
        Objects.equals(this.status, filterForListPermissionsInput.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterIds, granteeIds, granteeType, ids, namespaces, roleNames, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterForListPermissionsInput {\n");
    
    sb.append("    clusterIds: ").append(toIndentedString(clusterIds)).append("\n");
    sb.append("    granteeIds: ").append(toIndentedString(granteeIds)).append("\n");
    sb.append("    granteeType: ").append(toIndentedString(granteeType)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    namespaces: ").append(toIndentedString(namespaces)).append("\n");
    sb.append("    roleNames: ").append(toIndentedString(roleNames)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
