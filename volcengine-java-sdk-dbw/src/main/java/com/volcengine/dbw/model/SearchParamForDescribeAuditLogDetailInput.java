/*
 * dbw
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.dbw.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * SearchParamForDescribeAuditLogDetailInput
 */



public class SearchParamForDescribeAuditLogDetailInput {
  @SerializedName("AffectRowDown")
  private Integer affectRowDown = null;

  @SerializedName("AffectRowUp")
  private Integer affectRowUp = null;

  @SerializedName("DBs")
  private List<String> dbs = null;

  @SerializedName("DuringDown")
  private Long duringDown = null;

  @SerializedName("DuringUp")
  private Long duringUp = null;

  /**
   * Gets or Sets logLevels
   */
  @JsonAdapter(LogLevelsEnum.Adapter.class)
  public enum LogLevelsEnum {
    @SerializedName("Normal")
    NORMAL("Normal"),
    @SerializedName("Incident")
    INCIDENT("Incident"),
    @SerializedName("Warning")
    WARNING("Warning");

    private String value;

    LogLevelsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LogLevelsEnum fromValue(String input) {
      for (LogLevelsEnum b : LogLevelsEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LogLevelsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogLevelsEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public LogLevelsEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LogLevelsEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("LogLevels")
  private List<LogLevelsEnum> logLevels = null;

  @SerializedName("LogType")
  private List<String> logType = null;

  @SerializedName("NodeId")
  private String nodeId = null;

  @SerializedName("SourceIPs")
  private List<String> sourceIPs = null;

  @SerializedName("SqlFingerprint")
  private String sqlFingerprint = null;

  /**
   * Gets or Sets sqlMethods
   */
  @JsonAdapter(SqlMethodsEnum.Adapter.class)
  public enum SqlMethodsEnum {
    @SerializedName("SELECT")
    SELECT("SELECT"),
    @SerializedName("INSERT")
    INSERT("INSERT"),
    @SerializedName("UPDATE")
    UPDATE("UPDATE"),
    @SerializedName("DELETE")
    DELETE("DELETE"),
    @SerializedName("ALTER")
    ALTER("ALTER"),
    @SerializedName("CREATE")
    CREATE("CREATE"),
    @SerializedName("DROP")
    DROP("DROP"),
    @SerializedName("RENAME")
    RENAME("RENAME"),
    @SerializedName("TRUNCATE")
    TRUNCATE("TRUNCATE"),
    @SerializedName("LOGIN")
    LOGIN("LOGIN"),
    @SerializedName("LOGOUT")
    LOGOUT("LOGOUT");

    private String value;

    SqlMethodsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SqlMethodsEnum fromValue(String input) {
      for (SqlMethodsEnum b : SqlMethodsEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SqlMethodsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SqlMethodsEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SqlMethodsEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SqlMethodsEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("SqlMethods")
  private List<SqlMethodsEnum> sqlMethods = null;

  @SerializedName("Tables")
  private List<String> tables = null;

  @SerializedName("Users")
  private List<String> users = null;

  public SearchParamForDescribeAuditLogDetailInput affectRowDown(Integer affectRowDown) {
    this.affectRowDown = affectRowDown;
    return this;
  }

   /**
   * Get affectRowDown
   * @return affectRowDown
  **/
  @Schema(description = "")
  public Integer getAffectRowDown() {
    return affectRowDown;
  }

  public void setAffectRowDown(Integer affectRowDown) {
    this.affectRowDown = affectRowDown;
  }

  public SearchParamForDescribeAuditLogDetailInput affectRowUp(Integer affectRowUp) {
    this.affectRowUp = affectRowUp;
    return this;
  }

   /**
   * Get affectRowUp
   * @return affectRowUp
  **/
  @Schema(description = "")
  public Integer getAffectRowUp() {
    return affectRowUp;
  }

  public void setAffectRowUp(Integer affectRowUp) {
    this.affectRowUp = affectRowUp;
  }

  public SearchParamForDescribeAuditLogDetailInput dbs(List<String> dbs) {
    this.dbs = dbs;
    return this;
  }

  public SearchParamForDescribeAuditLogDetailInput addDbsItem(String dbsItem) {
    if (this.dbs == null) {
      this.dbs = new ArrayList<String>();
    }
    this.dbs.add(dbsItem);
    return this;
  }

   /**
   * Get dbs
   * @return dbs
  **/
  @Schema(description = "")
  public List<String> getDbs() {
    return dbs;
  }

  public void setDbs(List<String> dbs) {
    this.dbs = dbs;
  }

  public SearchParamForDescribeAuditLogDetailInput duringDown(Long duringDown) {
    this.duringDown = duringDown;
    return this;
  }

   /**
   * Get duringDown
   * @return duringDown
  **/
  @Schema(description = "")
  public Long getDuringDown() {
    return duringDown;
  }

  public void setDuringDown(Long duringDown) {
    this.duringDown = duringDown;
  }

  public SearchParamForDescribeAuditLogDetailInput duringUp(Long duringUp) {
    this.duringUp = duringUp;
    return this;
  }

   /**
   * Get duringUp
   * @return duringUp
  **/
  @Schema(description = "")
  public Long getDuringUp() {
    return duringUp;
  }

  public void setDuringUp(Long duringUp) {
    this.duringUp = duringUp;
  }

  public SearchParamForDescribeAuditLogDetailInput logLevels(List<LogLevelsEnum> logLevels) {
    this.logLevels = logLevels;
    return this;
  }

  public SearchParamForDescribeAuditLogDetailInput addLogLevelsItem(LogLevelsEnum logLevelsItem) {
    if (this.logLevels == null) {
      this.logLevels = new ArrayList<LogLevelsEnum>();
    }
    this.logLevels.add(logLevelsItem);
    return this;
  }

   /**
   * Get logLevels
   * @return logLevels
  **/
  @Schema(description = "")
  public List<LogLevelsEnum> getLogLevels() {
    return logLevels;
  }

  public void setLogLevels(List<LogLevelsEnum> logLevels) {
    this.logLevels = logLevels;
  }

  public SearchParamForDescribeAuditLogDetailInput logType(List<String> logType) {
    this.logType = logType;
    return this;
  }

  public SearchParamForDescribeAuditLogDetailInput addLogTypeItem(String logTypeItem) {
    if (this.logType == null) {
      this.logType = new ArrayList<String>();
    }
    this.logType.add(logTypeItem);
    return this;
  }

   /**
   * Get logType
   * @return logType
  **/
  @Schema(description = "")
  public List<String> getLogType() {
    return logType;
  }

  public void setLogType(List<String> logType) {
    this.logType = logType;
  }

  public SearchParamForDescribeAuditLogDetailInput nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @Schema(description = "")
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }

  public SearchParamForDescribeAuditLogDetailInput sourceIPs(List<String> sourceIPs) {
    this.sourceIPs = sourceIPs;
    return this;
  }

  public SearchParamForDescribeAuditLogDetailInput addSourceIPsItem(String sourceIPsItem) {
    if (this.sourceIPs == null) {
      this.sourceIPs = new ArrayList<String>();
    }
    this.sourceIPs.add(sourceIPsItem);
    return this;
  }

   /**
   * Get sourceIPs
   * @return sourceIPs
  **/
  @Schema(description = "")
  public List<String> getSourceIPs() {
    return sourceIPs;
  }

  public void setSourceIPs(List<String> sourceIPs) {
    this.sourceIPs = sourceIPs;
  }

  public SearchParamForDescribeAuditLogDetailInput sqlFingerprint(String sqlFingerprint) {
    this.sqlFingerprint = sqlFingerprint;
    return this;
  }

   /**
   * Get sqlFingerprint
   * @return sqlFingerprint
  **/
  @Schema(description = "")
  public String getSqlFingerprint() {
    return sqlFingerprint;
  }

  public void setSqlFingerprint(String sqlFingerprint) {
    this.sqlFingerprint = sqlFingerprint;
  }

  public SearchParamForDescribeAuditLogDetailInput sqlMethods(List<SqlMethodsEnum> sqlMethods) {
    this.sqlMethods = sqlMethods;
    return this;
  }

  public SearchParamForDescribeAuditLogDetailInput addSqlMethodsItem(SqlMethodsEnum sqlMethodsItem) {
    if (this.sqlMethods == null) {
      this.sqlMethods = new ArrayList<SqlMethodsEnum>();
    }
    this.sqlMethods.add(sqlMethodsItem);
    return this;
  }

   /**
   * Get sqlMethods
   * @return sqlMethods
  **/
  @Schema(description = "")
  public List<SqlMethodsEnum> getSqlMethods() {
    return sqlMethods;
  }

  public void setSqlMethods(List<SqlMethodsEnum> sqlMethods) {
    this.sqlMethods = sqlMethods;
  }

  public SearchParamForDescribeAuditLogDetailInput tables(List<String> tables) {
    this.tables = tables;
    return this;
  }

  public SearchParamForDescribeAuditLogDetailInput addTablesItem(String tablesItem) {
    if (this.tables == null) {
      this.tables = new ArrayList<String>();
    }
    this.tables.add(tablesItem);
    return this;
  }

   /**
   * Get tables
   * @return tables
  **/
  @Schema(description = "")
  public List<String> getTables() {
    return tables;
  }

  public void setTables(List<String> tables) {
    this.tables = tables;
  }

  public SearchParamForDescribeAuditLogDetailInput users(List<String> users) {
    this.users = users;
    return this;
  }

  public SearchParamForDescribeAuditLogDetailInput addUsersItem(String usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<String>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * Get users
   * @return users
  **/
  @Schema(description = "")
  public List<String> getUsers() {
    return users;
  }

  public void setUsers(List<String> users) {
    this.users = users;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchParamForDescribeAuditLogDetailInput searchParamForDescribeAuditLogDetailInput = (SearchParamForDescribeAuditLogDetailInput) o;
    return Objects.equals(this.affectRowDown, searchParamForDescribeAuditLogDetailInput.affectRowDown) &&
        Objects.equals(this.affectRowUp, searchParamForDescribeAuditLogDetailInput.affectRowUp) &&
        Objects.equals(this.dbs, searchParamForDescribeAuditLogDetailInput.dbs) &&
        Objects.equals(this.duringDown, searchParamForDescribeAuditLogDetailInput.duringDown) &&
        Objects.equals(this.duringUp, searchParamForDescribeAuditLogDetailInput.duringUp) &&
        Objects.equals(this.logLevels, searchParamForDescribeAuditLogDetailInput.logLevels) &&
        Objects.equals(this.logType, searchParamForDescribeAuditLogDetailInput.logType) &&
        Objects.equals(this.nodeId, searchParamForDescribeAuditLogDetailInput.nodeId) &&
        Objects.equals(this.sourceIPs, searchParamForDescribeAuditLogDetailInput.sourceIPs) &&
        Objects.equals(this.sqlFingerprint, searchParamForDescribeAuditLogDetailInput.sqlFingerprint) &&
        Objects.equals(this.sqlMethods, searchParamForDescribeAuditLogDetailInput.sqlMethods) &&
        Objects.equals(this.tables, searchParamForDescribeAuditLogDetailInput.tables) &&
        Objects.equals(this.users, searchParamForDescribeAuditLogDetailInput.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectRowDown, affectRowUp, dbs, duringDown, duringUp, logLevels, logType, nodeId, sourceIPs, sqlFingerprint, sqlMethods, tables, users);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchParamForDescribeAuditLogDetailInput {\n");
    
    sb.append("    affectRowDown: ").append(toIndentedString(affectRowDown)).append("\n");
    sb.append("    affectRowUp: ").append(toIndentedString(affectRowUp)).append("\n");
    sb.append("    dbs: ").append(toIndentedString(dbs)).append("\n");
    sb.append("    duringDown: ").append(toIndentedString(duringDown)).append("\n");
    sb.append("    duringUp: ").append(toIndentedString(duringUp)).append("\n");
    sb.append("    logLevels: ").append(toIndentedString(logLevels)).append("\n");
    sb.append("    logType: ").append(toIndentedString(logType)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    sourceIPs: ").append(toIndentedString(sourceIPs)).append("\n");
    sb.append("    sqlFingerprint: ").append(toIndentedString(sqlFingerprint)).append("\n");
    sb.append("    sqlMethods: ").append(toIndentedString(sqlMethods)).append("\n");
    sb.append("    tables: ").append(toIndentedString(tables)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
