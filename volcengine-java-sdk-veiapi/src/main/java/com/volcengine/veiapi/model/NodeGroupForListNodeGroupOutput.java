/*
 * vei_api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.veiapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.veiapi.model.MetaForListNodeGroupOutput;
import com.volcengine.veiapi.model.NodeInfoForListNodeGroupOutput;
import com.volcengine.veiapi.model.NodeStatusOverviewForListNodeGroupOutput;
import com.volcengine.veiapi.model.TagsForListNodeGroupOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * NodeGroupForListNodeGroupOutput
 */



public class NodeGroupForListNodeGroupOutput {
  @SerializedName("description")
  private String description = null;

  @SerializedName("meta")
  private MetaForListNodeGroupOutput meta = null;

  @SerializedName("nodeGroupID")
  private String nodeGroupID = null;

  @SerializedName("nodeGroupName")
  private String nodeGroupName = null;

  @SerializedName("nodeInfos")
  private List<NodeInfoForListNodeGroupOutput> nodeInfos = null;

  @SerializedName("nodeStatusOverview")
  private NodeStatusOverviewForListNodeGroupOutput nodeStatusOverview = null;

  @SerializedName("node_available_cpu")
  private String nodeAvailableCpu = null;

  @SerializedName("node_available_mem")
  private Long nodeAvailableMem = null;

  @SerializedName("projectID")
  private String projectID = null;

  @SerializedName("tags")
  private TagsForListNodeGroupOutput tags = null;

  public NodeGroupForListNodeGroupOutput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public NodeGroupForListNodeGroupOutput meta(MetaForListNodeGroupOutput meta) {
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @Valid
  @Schema(description = "")
  public MetaForListNodeGroupOutput getMeta() {
    return meta;
  }

  public void setMeta(MetaForListNodeGroupOutput meta) {
    this.meta = meta;
  }

  public NodeGroupForListNodeGroupOutput nodeGroupID(String nodeGroupID) {
    this.nodeGroupID = nodeGroupID;
    return this;
  }

   /**
   * Get nodeGroupID
   * @return nodeGroupID
  **/
  @Schema(description = "")
  public String getNodeGroupID() {
    return nodeGroupID;
  }

  public void setNodeGroupID(String nodeGroupID) {
    this.nodeGroupID = nodeGroupID;
  }

  public NodeGroupForListNodeGroupOutput nodeGroupName(String nodeGroupName) {
    this.nodeGroupName = nodeGroupName;
    return this;
  }

   /**
   * Get nodeGroupName
   * @return nodeGroupName
  **/
  @Schema(description = "")
  public String getNodeGroupName() {
    return nodeGroupName;
  }

  public void setNodeGroupName(String nodeGroupName) {
    this.nodeGroupName = nodeGroupName;
  }

  public NodeGroupForListNodeGroupOutput nodeInfos(List<NodeInfoForListNodeGroupOutput> nodeInfos) {
    this.nodeInfos = nodeInfos;
    return this;
  }

  public NodeGroupForListNodeGroupOutput addNodeInfosItem(NodeInfoForListNodeGroupOutput nodeInfosItem) {
    if (this.nodeInfos == null) {
      this.nodeInfos = new ArrayList<NodeInfoForListNodeGroupOutput>();
    }
    this.nodeInfos.add(nodeInfosItem);
    return this;
  }

   /**
   * Get nodeInfos
   * @return nodeInfos
  **/
  @Valid
  @Schema(description = "")
  public List<NodeInfoForListNodeGroupOutput> getNodeInfos() {
    return nodeInfos;
  }

  public void setNodeInfos(List<NodeInfoForListNodeGroupOutput> nodeInfos) {
    this.nodeInfos = nodeInfos;
  }

  public NodeGroupForListNodeGroupOutput nodeStatusOverview(NodeStatusOverviewForListNodeGroupOutput nodeStatusOverview) {
    this.nodeStatusOverview = nodeStatusOverview;
    return this;
  }

   /**
   * Get nodeStatusOverview
   * @return nodeStatusOverview
  **/
  @Valid
  @Schema(description = "")
  public NodeStatusOverviewForListNodeGroupOutput getNodeStatusOverview() {
    return nodeStatusOverview;
  }

  public void setNodeStatusOverview(NodeStatusOverviewForListNodeGroupOutput nodeStatusOverview) {
    this.nodeStatusOverview = nodeStatusOverview;
  }

  public NodeGroupForListNodeGroupOutput nodeAvailableCpu(String nodeAvailableCpu) {
    this.nodeAvailableCpu = nodeAvailableCpu;
    return this;
  }

   /**
   * Get nodeAvailableCpu
   * @return nodeAvailableCpu
  **/
  @Schema(description = "")
  public String getNodeAvailableCpu() {
    return nodeAvailableCpu;
  }

  public void setNodeAvailableCpu(String nodeAvailableCpu) {
    this.nodeAvailableCpu = nodeAvailableCpu;
  }

  public NodeGroupForListNodeGroupOutput nodeAvailableMem(Long nodeAvailableMem) {
    this.nodeAvailableMem = nodeAvailableMem;
    return this;
  }

   /**
   * Get nodeAvailableMem
   * @return nodeAvailableMem
  **/
  @Schema(description = "")
  public Long getNodeAvailableMem() {
    return nodeAvailableMem;
  }

  public void setNodeAvailableMem(Long nodeAvailableMem) {
    this.nodeAvailableMem = nodeAvailableMem;
  }

  public NodeGroupForListNodeGroupOutput projectID(String projectID) {
    this.projectID = projectID;
    return this;
  }

   /**
   * Get projectID
   * @return projectID
  **/
  @Schema(description = "")
  public String getProjectID() {
    return projectID;
  }

  public void setProjectID(String projectID) {
    this.projectID = projectID;
  }

  public NodeGroupForListNodeGroupOutput tags(TagsForListNodeGroupOutput tags) {
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Valid
  @Schema(description = "")
  public TagsForListNodeGroupOutput getTags() {
    return tags;
  }

  public void setTags(TagsForListNodeGroupOutput tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeGroupForListNodeGroupOutput nodeGroupForListNodeGroupOutput = (NodeGroupForListNodeGroupOutput) o;
    return Objects.equals(this.description, nodeGroupForListNodeGroupOutput.description) &&
        Objects.equals(this.meta, nodeGroupForListNodeGroupOutput.meta) &&
        Objects.equals(this.nodeGroupID, nodeGroupForListNodeGroupOutput.nodeGroupID) &&
        Objects.equals(this.nodeGroupName, nodeGroupForListNodeGroupOutput.nodeGroupName) &&
        Objects.equals(this.nodeInfos, nodeGroupForListNodeGroupOutput.nodeInfos) &&
        Objects.equals(this.nodeStatusOverview, nodeGroupForListNodeGroupOutput.nodeStatusOverview) &&
        Objects.equals(this.nodeAvailableCpu, nodeGroupForListNodeGroupOutput.nodeAvailableCpu) &&
        Objects.equals(this.nodeAvailableMem, nodeGroupForListNodeGroupOutput.nodeAvailableMem) &&
        Objects.equals(this.projectID, nodeGroupForListNodeGroupOutput.projectID) &&
        Objects.equals(this.tags, nodeGroupForListNodeGroupOutput.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, meta, nodeGroupID, nodeGroupName, nodeInfos, nodeStatusOverview, nodeAvailableCpu, nodeAvailableMem, projectID, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeGroupForListNodeGroupOutput {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    nodeGroupID: ").append(toIndentedString(nodeGroupID)).append("\n");
    sb.append("    nodeGroupName: ").append(toIndentedString(nodeGroupName)).append("\n");
    sb.append("    nodeInfos: ").append(toIndentedString(nodeInfos)).append("\n");
    sb.append("    nodeStatusOverview: ").append(toIndentedString(nodeStatusOverview)).append("\n");
    sb.append("    nodeAvailableCpu: ").append(toIndentedString(nodeAvailableCpu)).append("\n");
    sb.append("    nodeAvailableMem: ").append(toIndentedString(nodeAvailableMem)).append("\n");
    sb.append("    projectID: ").append(toIndentedString(projectID)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
