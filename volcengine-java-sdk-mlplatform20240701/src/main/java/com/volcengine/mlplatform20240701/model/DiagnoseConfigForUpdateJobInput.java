/*
 * ml_platform20240701
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.mlplatform20240701.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DiagnoseConfigForUpdateJobInput
 */



public class DiagnoseConfigForUpdateJobInput {
  @SerializedName("DetectionIntervalSeconds")
  private Long detectionIntervalSeconds = null;

  @SerializedName("FirstDetectionWaitSeconds")
  private Long firstDetectionWaitSeconds = null;

  /**
   * Gets or Sets name
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    @SerializedName("EnvironmentalDiagnosis")
    ENVIRONMENTALDIAGNOSIS("EnvironmentalDiagnosis"),
    @SerializedName("PythonDetection")
    PYTHONDETECTION("PythonDetection"),
    @SerializedName("LogDetection")
    LOGDETECTION("LogDetection");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static NameEnum fromValue(String input) {
      for (NameEnum b : NameEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return NameEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Name")
  private NameEnum name = null;

  /**
   * Gets or Sets triggers
   */
  @JsonAdapter(TriggersEnum.Adapter.class)
  public enum TriggersEnum {
    @SerializedName("BeforeStart")
    BEFORESTART("BeforeStart"),
    @SerializedName("JobRunning")
    JOBRUNNING("JobRunning"),
    @SerializedName("JobFailed")
    JOBFAILED("JobFailed"),
    @SerializedName("StopByUser")
    STOPBYUSER("StopByUser");

    private String value;

    TriggersEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TriggersEnum fromValue(String input) {
      for (TriggersEnum b : TriggersEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TriggersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggersEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TriggersEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TriggersEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Triggers")
  private List<TriggersEnum> triggers = null;

  public DiagnoseConfigForUpdateJobInput detectionIntervalSeconds(Long detectionIntervalSeconds) {
    this.detectionIntervalSeconds = detectionIntervalSeconds;
    return this;
  }

   /**
   * Get detectionIntervalSeconds
   * @return detectionIntervalSeconds
  **/
  @Schema(description = "")
  public Long getDetectionIntervalSeconds() {
    return detectionIntervalSeconds;
  }

  public void setDetectionIntervalSeconds(Long detectionIntervalSeconds) {
    this.detectionIntervalSeconds = detectionIntervalSeconds;
  }

  public DiagnoseConfigForUpdateJobInput firstDetectionWaitSeconds(Long firstDetectionWaitSeconds) {
    this.firstDetectionWaitSeconds = firstDetectionWaitSeconds;
    return this;
  }

   /**
   * Get firstDetectionWaitSeconds
   * @return firstDetectionWaitSeconds
  **/
  @Schema(description = "")
  public Long getFirstDetectionWaitSeconds() {
    return firstDetectionWaitSeconds;
  }

  public void setFirstDetectionWaitSeconds(Long firstDetectionWaitSeconds) {
    this.firstDetectionWaitSeconds = firstDetectionWaitSeconds;
  }

  public DiagnoseConfigForUpdateJobInput name(NameEnum name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public NameEnum getName() {
    return name;
  }

  public void setName(NameEnum name) {
    this.name = name;
  }

  public DiagnoseConfigForUpdateJobInput triggers(List<TriggersEnum> triggers) {
    this.triggers = triggers;
    return this;
  }

  public DiagnoseConfigForUpdateJobInput addTriggersItem(TriggersEnum triggersItem) {
    if (this.triggers == null) {
      this.triggers = new ArrayList<TriggersEnum>();
    }
    this.triggers.add(triggersItem);
    return this;
  }

   /**
   * Get triggers
   * @return triggers
  **/
  @Schema(description = "")
  public List<TriggersEnum> getTriggers() {
    return triggers;
  }

  public void setTriggers(List<TriggersEnum> triggers) {
    this.triggers = triggers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiagnoseConfigForUpdateJobInput diagnoseConfigForUpdateJobInput = (DiagnoseConfigForUpdateJobInput) o;
    return Objects.equals(this.detectionIntervalSeconds, diagnoseConfigForUpdateJobInput.detectionIntervalSeconds) &&
        Objects.equals(this.firstDetectionWaitSeconds, diagnoseConfigForUpdateJobInput.firstDetectionWaitSeconds) &&
        Objects.equals(this.name, diagnoseConfigForUpdateJobInput.name) &&
        Objects.equals(this.triggers, diagnoseConfigForUpdateJobInput.triggers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detectionIntervalSeconds, firstDetectionWaitSeconds, name, triggers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiagnoseConfigForUpdateJobInput {\n");
    
    sb.append("    detectionIntervalSeconds: ").append(toIndentedString(detectionIntervalSeconds)).append("\n");
    sb.append("    firstDetectionWaitSeconds: ").append(toIndentedString(firstDetectionWaitSeconds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
