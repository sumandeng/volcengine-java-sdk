/*
 * ml_platform20240701
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.mlplatform20240701.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * NasForCreateDevInstanceInput
 */



public class NasForCreateDevInstanceInput {
  @SerializedName("Addr")
  private String addr = null;

  @SerializedName("FileSystemName")
  private String fileSystemName = null;

  @SerializedName("Id")
  private String id = null;

  @SerializedName("NasType")
  private String nasType = null;

  @SerializedName("SubPath")
  private String subPath = null;

  public NasForCreateDevInstanceInput addr(String addr) {
    this.addr = addr;
    return this;
  }

   /**
   * Get addr
   * @return addr
  **/
  @Schema(description = "")
  public String getAddr() {
    return addr;
  }

  public void setAddr(String addr) {
    this.addr = addr;
  }

  public NasForCreateDevInstanceInput fileSystemName(String fileSystemName) {
    this.fileSystemName = fileSystemName;
    return this;
  }

   /**
   * Get fileSystemName
   * @return fileSystemName
  **/
  @Schema(description = "")
  public String getFileSystemName() {
    return fileSystemName;
  }

  public void setFileSystemName(String fileSystemName) {
    this.fileSystemName = fileSystemName;
  }

  public NasForCreateDevInstanceInput id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public NasForCreateDevInstanceInput nasType(String nasType) {
    this.nasType = nasType;
    return this;
  }

   /**
   * Get nasType
   * @return nasType
  **/
  @Schema(description = "")
  public String getNasType() {
    return nasType;
  }

  public void setNasType(String nasType) {
    this.nasType = nasType;
  }

  public NasForCreateDevInstanceInput subPath(String subPath) {
    this.subPath = subPath;
    return this;
  }

   /**
   * Get subPath
   * @return subPath
  **/
  @Schema(description = "")
  public String getSubPath() {
    return subPath;
  }

  public void setSubPath(String subPath) {
    this.subPath = subPath;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NasForCreateDevInstanceInput nasForCreateDevInstanceInput = (NasForCreateDevInstanceInput) o;
    return Objects.equals(this.addr, nasForCreateDevInstanceInput.addr) &&
        Objects.equals(this.fileSystemName, nasForCreateDevInstanceInput.fileSystemName) &&
        Objects.equals(this.id, nasForCreateDevInstanceInput.id) &&
        Objects.equals(this.nasType, nasForCreateDevInstanceInput.nasType) &&
        Objects.equals(this.subPath, nasForCreateDevInstanceInput.subPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addr, fileSystemName, id, nasType, subPath);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NasForCreateDevInstanceInput {\n");
    
    sb.append("    addr: ").append(toIndentedString(addr)).append("\n");
    sb.append("    fileSystemName: ").append(toIndentedString(fileSystemName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nasType: ").append(toIndentedString(nasType)).append("\n");
    sb.append("    subPath: ").append(toIndentedString(subPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
