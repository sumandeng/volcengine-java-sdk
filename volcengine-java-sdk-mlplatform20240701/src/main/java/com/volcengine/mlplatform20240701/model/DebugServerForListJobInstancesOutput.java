/*
 * ml_platform20240701
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.mlplatform20240701.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DebugServerForListJobInstancesOutput
 */



public class DebugServerForListJobInstancesOutput {
  @SerializedName("PrivateUrl")
  private String privateUrl = null;

  @SerializedName("PublicUrl")
  private String publicUrl = null;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    @SerializedName("Deploying")
    DEPLOYING("Deploying"),
    @SerializedName("Running")
    RUNNING("Running");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String input) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StateEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("State")
  private StateEnum state = null;

  public DebugServerForListJobInstancesOutput privateUrl(String privateUrl) {
    this.privateUrl = privateUrl;
    return this;
  }

   /**
   * Get privateUrl
   * @return privateUrl
  **/
  @Schema(description = "")
  public String getPrivateUrl() {
    return privateUrl;
  }

  public void setPrivateUrl(String privateUrl) {
    this.privateUrl = privateUrl;
  }

  public DebugServerForListJobInstancesOutput publicUrl(String publicUrl) {
    this.publicUrl = publicUrl;
    return this;
  }

   /**
   * Get publicUrl
   * @return publicUrl
  **/
  @Schema(description = "")
  public String getPublicUrl() {
    return publicUrl;
  }

  public void setPublicUrl(String publicUrl) {
    this.publicUrl = publicUrl;
  }

  public DebugServerForListJobInstancesOutput state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(description = "")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DebugServerForListJobInstancesOutput debugServerForListJobInstancesOutput = (DebugServerForListJobInstancesOutput) o;
    return Objects.equals(this.privateUrl, debugServerForListJobInstancesOutput.privateUrl) &&
        Objects.equals(this.publicUrl, debugServerForListJobInstancesOutput.publicUrl) &&
        Objects.equals(this.state, debugServerForListJobInstancesOutput.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(privateUrl, publicUrl, state);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DebugServerForListJobInstancesOutput {\n");
    
    sb.append("    privateUrl: ").append(toIndentedString(privateUrl)).append("\n");
    sb.append("    publicUrl: ").append(toIndentedString(publicUrl)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
