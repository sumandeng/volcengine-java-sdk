/*
 * ml_platform20240701
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.mlplatform20240701.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.mlplatform20240701.model.CodeForGetJobOutput;
import com.volcengine.mlplatform20240701.model.EnvForGetJobOutput;
import com.volcengine.mlplatform20240701.model.ImageForGetJobOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * RuntimeConfigForGetJobOutput
 */



public class RuntimeConfigForGetJobOutput {
  @SerializedName("AdvanceArgs")
  private String advanceArgs = null;

  @SerializedName("Code")
  private CodeForGetJobOutput code = null;

  @SerializedName("Command")
  private String command = null;

  @SerializedName("Envs")
  private List<EnvForGetJobOutput> envs = null;

  /**
   * Gets or Sets framework
   */
  @JsonAdapter(FrameworkEnum.Adapter.class)
  public enum FrameworkEnum {
    @SerializedName("PyTorch")
    PYTORCH("PyTorch"),
    @SerializedName("MPI")
    MPI("MPI"),
    @SerializedName("Ray")
    RAY("Ray"),
    @SerializedName("TensorFlow")
    TENSORFLOW("TensorFlow"),
    @SerializedName("Custom")
    CUSTOM("Custom");

    private String value;

    FrameworkEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FrameworkEnum fromValue(String input) {
      for (FrameworkEnum b : FrameworkEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FrameworkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrameworkEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public FrameworkEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FrameworkEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Framework")
  private FrameworkEnum framework = null;

  @SerializedName("Image")
  private ImageForGetJobOutput image = null;

  public RuntimeConfigForGetJobOutput advanceArgs(String advanceArgs) {
    this.advanceArgs = advanceArgs;
    return this;
  }

   /**
   * Get advanceArgs
   * @return advanceArgs
  **/
  @Schema(description = "")
  public String getAdvanceArgs() {
    return advanceArgs;
  }

  public void setAdvanceArgs(String advanceArgs) {
    this.advanceArgs = advanceArgs;
  }

  public RuntimeConfigForGetJobOutput code(CodeForGetJobOutput code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @Valid
  @Schema(description = "")
  public CodeForGetJobOutput getCode() {
    return code;
  }

  public void setCode(CodeForGetJobOutput code) {
    this.code = code;
  }

  public RuntimeConfigForGetJobOutput command(String command) {
    this.command = command;
    return this;
  }

   /**
   * Get command
   * @return command
  **/
  @Schema(description = "")
  public String getCommand() {
    return command;
  }

  public void setCommand(String command) {
    this.command = command;
  }

  public RuntimeConfigForGetJobOutput envs(List<EnvForGetJobOutput> envs) {
    this.envs = envs;
    return this;
  }

  public RuntimeConfigForGetJobOutput addEnvsItem(EnvForGetJobOutput envsItem) {
    if (this.envs == null) {
      this.envs = new ArrayList<EnvForGetJobOutput>();
    }
    this.envs.add(envsItem);
    return this;
  }

   /**
   * Get envs
   * @return envs
  **/
  @Valid
  @Schema(description = "")
  public List<EnvForGetJobOutput> getEnvs() {
    return envs;
  }

  public void setEnvs(List<EnvForGetJobOutput> envs) {
    this.envs = envs;
  }

  public RuntimeConfigForGetJobOutput framework(FrameworkEnum framework) {
    this.framework = framework;
    return this;
  }

   /**
   * Get framework
   * @return framework
  **/
  @Schema(description = "")
  public FrameworkEnum getFramework() {
    return framework;
  }

  public void setFramework(FrameworkEnum framework) {
    this.framework = framework;
  }

  public RuntimeConfigForGetJobOutput image(ImageForGetJobOutput image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @Valid
  @Schema(description = "")
  public ImageForGetJobOutput getImage() {
    return image;
  }

  public void setImage(ImageForGetJobOutput image) {
    this.image = image;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuntimeConfigForGetJobOutput runtimeConfigForGetJobOutput = (RuntimeConfigForGetJobOutput) o;
    return Objects.equals(this.advanceArgs, runtimeConfigForGetJobOutput.advanceArgs) &&
        Objects.equals(this.code, runtimeConfigForGetJobOutput.code) &&
        Objects.equals(this.command, runtimeConfigForGetJobOutput.command) &&
        Objects.equals(this.envs, runtimeConfigForGetJobOutput.envs) &&
        Objects.equals(this.framework, runtimeConfigForGetJobOutput.framework) &&
        Objects.equals(this.image, runtimeConfigForGetJobOutput.image);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advanceArgs, code, command, envs, framework, image);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuntimeConfigForGetJobOutput {\n");
    
    sb.append("    advanceArgs: ").append(toIndentedString(advanceArgs)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    envs: ").append(toIndentedString(envs)).append("\n");
    sb.append("    framework: ").append(toIndentedString(framework)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
