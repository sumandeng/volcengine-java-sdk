/*
 * vod20250101
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vod20250101.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vod20250101.model.AudioStreamMetaForGetExecutionOutput;
import com.volcengine.vod20250101.model.EncryptionForGetExecutionOutput;
import com.volcengine.vod20250101.model.VideoStreamMetaForGetExecutionOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ConvertTranscodeVideoForGetExecutionOutput
 */



public class ConvertTranscodeVideoForGetExecutionOutput {
  @SerializedName("AudioStreamMeta")
  private AudioStreamMetaForGetExecutionOutput audioStreamMeta = null;

  @SerializedName("CreateTime")
  private String createTime = null;

  @SerializedName("Duration")
  private Float duration = null;

  @SerializedName("DynamicRange")
  private String dynamicRange = null;

  @SerializedName("EncodedType")
  private String encodedType = null;

  @SerializedName("Encrypt")
  private Boolean encrypt = null;

  @SerializedName("Encryption")
  private EncryptionForGetExecutionOutput encryption = null;

  @SerializedName("FileId")
  private String fileId = null;

  @SerializedName("FileType")
  private String fileType = null;

  @SerializedName("Format")
  private String format = null;

  @SerializedName("LogoType")
  private String logoType = null;

  @SerializedName("Md5")
  private String md5 = null;

  @SerializedName("Size")
  private Double size = null;

  @SerializedName("StoreUri")
  private String storeUri = null;

  @SerializedName("TosStorageClass")
  private String tosStorageClass = null;

  @SerializedName("VideoStreamMeta")
  private VideoStreamMetaForGetExecutionOutput videoStreamMeta = null;

  public ConvertTranscodeVideoForGetExecutionOutput audioStreamMeta(AudioStreamMetaForGetExecutionOutput audioStreamMeta) {
    this.audioStreamMeta = audioStreamMeta;
    return this;
  }

   /**
   * Get audioStreamMeta
   * @return audioStreamMeta
  **/
  @Valid
  @Schema(description = "")
  public AudioStreamMetaForGetExecutionOutput getAudioStreamMeta() {
    return audioStreamMeta;
  }

  public void setAudioStreamMeta(AudioStreamMetaForGetExecutionOutput audioStreamMeta) {
    this.audioStreamMeta = audioStreamMeta;
  }

  public ConvertTranscodeVideoForGetExecutionOutput createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @Schema(description = "")
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }

  public ConvertTranscodeVideoForGetExecutionOutput duration(Float duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @Schema(description = "")
  public Float getDuration() {
    return duration;
  }

  public void setDuration(Float duration) {
    this.duration = duration;
  }

  public ConvertTranscodeVideoForGetExecutionOutput dynamicRange(String dynamicRange) {
    this.dynamicRange = dynamicRange;
    return this;
  }

   /**
   * Get dynamicRange
   * @return dynamicRange
  **/
  @Schema(description = "")
  public String getDynamicRange() {
    return dynamicRange;
  }

  public void setDynamicRange(String dynamicRange) {
    this.dynamicRange = dynamicRange;
  }

  public ConvertTranscodeVideoForGetExecutionOutput encodedType(String encodedType) {
    this.encodedType = encodedType;
    return this;
  }

   /**
   * Get encodedType
   * @return encodedType
  **/
  @Schema(description = "")
  public String getEncodedType() {
    return encodedType;
  }

  public void setEncodedType(String encodedType) {
    this.encodedType = encodedType;
  }

  public ConvertTranscodeVideoForGetExecutionOutput encrypt(Boolean encrypt) {
    this.encrypt = encrypt;
    return this;
  }

   /**
   * Get encrypt
   * @return encrypt
  **/
  @Schema(description = "")
  public Boolean isEncrypt() {
    return encrypt;
  }

  public void setEncrypt(Boolean encrypt) {
    this.encrypt = encrypt;
  }

  public ConvertTranscodeVideoForGetExecutionOutput encryption(EncryptionForGetExecutionOutput encryption) {
    this.encryption = encryption;
    return this;
  }

   /**
   * Get encryption
   * @return encryption
  **/
  @Valid
  @Schema(description = "")
  public EncryptionForGetExecutionOutput getEncryption() {
    return encryption;
  }

  public void setEncryption(EncryptionForGetExecutionOutput encryption) {
    this.encryption = encryption;
  }

  public ConvertTranscodeVideoForGetExecutionOutput fileId(String fileId) {
    this.fileId = fileId;
    return this;
  }

   /**
   * Get fileId
   * @return fileId
  **/
  @Schema(description = "")
  public String getFileId() {
    return fileId;
  }

  public void setFileId(String fileId) {
    this.fileId = fileId;
  }

  public ConvertTranscodeVideoForGetExecutionOutput fileType(String fileType) {
    this.fileType = fileType;
    return this;
  }

   /**
   * Get fileType
   * @return fileType
  **/
  @Schema(description = "")
  public String getFileType() {
    return fileType;
  }

  public void setFileType(String fileType) {
    this.fileType = fileType;
  }

  public ConvertTranscodeVideoForGetExecutionOutput format(String format) {
    this.format = format;
    return this;
  }

   /**
   * Get format
   * @return format
  **/
  @Schema(description = "")
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }

  public ConvertTranscodeVideoForGetExecutionOutput logoType(String logoType) {
    this.logoType = logoType;
    return this;
  }

   /**
   * Get logoType
   * @return logoType
  **/
  @Schema(description = "")
  public String getLogoType() {
    return logoType;
  }

  public void setLogoType(String logoType) {
    this.logoType = logoType;
  }

  public ConvertTranscodeVideoForGetExecutionOutput md5(String md5) {
    this.md5 = md5;
    return this;
  }

   /**
   * Get md5
   * @return md5
  **/
  @Schema(description = "")
  public String getMd5() {
    return md5;
  }

  public void setMd5(String md5) {
    this.md5 = md5;
  }

  public ConvertTranscodeVideoForGetExecutionOutput size(Double size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @Schema(description = "")
  public Double getSize() {
    return size;
  }

  public void setSize(Double size) {
    this.size = size;
  }

  public ConvertTranscodeVideoForGetExecutionOutput storeUri(String storeUri) {
    this.storeUri = storeUri;
    return this;
  }

   /**
   * Get storeUri
   * @return storeUri
  **/
  @Schema(description = "")
  public String getStoreUri() {
    return storeUri;
  }

  public void setStoreUri(String storeUri) {
    this.storeUri = storeUri;
  }

  public ConvertTranscodeVideoForGetExecutionOutput tosStorageClass(String tosStorageClass) {
    this.tosStorageClass = tosStorageClass;
    return this;
  }

   /**
   * Get tosStorageClass
   * @return tosStorageClass
  **/
  @Schema(description = "")
  public String getTosStorageClass() {
    return tosStorageClass;
  }

  public void setTosStorageClass(String tosStorageClass) {
    this.tosStorageClass = tosStorageClass;
  }

  public ConvertTranscodeVideoForGetExecutionOutput videoStreamMeta(VideoStreamMetaForGetExecutionOutput videoStreamMeta) {
    this.videoStreamMeta = videoStreamMeta;
    return this;
  }

   /**
   * Get videoStreamMeta
   * @return videoStreamMeta
  **/
  @Valid
  @Schema(description = "")
  public VideoStreamMetaForGetExecutionOutput getVideoStreamMeta() {
    return videoStreamMeta;
  }

  public void setVideoStreamMeta(VideoStreamMetaForGetExecutionOutput videoStreamMeta) {
    this.videoStreamMeta = videoStreamMeta;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConvertTranscodeVideoForGetExecutionOutput convertTranscodeVideoForGetExecutionOutput = (ConvertTranscodeVideoForGetExecutionOutput) o;
    return Objects.equals(this.audioStreamMeta, convertTranscodeVideoForGetExecutionOutput.audioStreamMeta) &&
        Objects.equals(this.createTime, convertTranscodeVideoForGetExecutionOutput.createTime) &&
        Objects.equals(this.duration, convertTranscodeVideoForGetExecutionOutput.duration) &&
        Objects.equals(this.dynamicRange, convertTranscodeVideoForGetExecutionOutput.dynamicRange) &&
        Objects.equals(this.encodedType, convertTranscodeVideoForGetExecutionOutput.encodedType) &&
        Objects.equals(this.encrypt, convertTranscodeVideoForGetExecutionOutput.encrypt) &&
        Objects.equals(this.encryption, convertTranscodeVideoForGetExecutionOutput.encryption) &&
        Objects.equals(this.fileId, convertTranscodeVideoForGetExecutionOutput.fileId) &&
        Objects.equals(this.fileType, convertTranscodeVideoForGetExecutionOutput.fileType) &&
        Objects.equals(this.format, convertTranscodeVideoForGetExecutionOutput.format) &&
        Objects.equals(this.logoType, convertTranscodeVideoForGetExecutionOutput.logoType) &&
        Objects.equals(this.md5, convertTranscodeVideoForGetExecutionOutput.md5) &&
        Objects.equals(this.size, convertTranscodeVideoForGetExecutionOutput.size) &&
        Objects.equals(this.storeUri, convertTranscodeVideoForGetExecutionOutput.storeUri) &&
        Objects.equals(this.tosStorageClass, convertTranscodeVideoForGetExecutionOutput.tosStorageClass) &&
        Objects.equals(this.videoStreamMeta, convertTranscodeVideoForGetExecutionOutput.videoStreamMeta);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioStreamMeta, createTime, duration, dynamicRange, encodedType, encrypt, encryption, fileId, fileType, format, logoType, md5, size, storeUri, tosStorageClass, videoStreamMeta);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConvertTranscodeVideoForGetExecutionOutput {\n");
    
    sb.append("    audioStreamMeta: ").append(toIndentedString(audioStreamMeta)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    dynamicRange: ").append(toIndentedString(dynamicRange)).append("\n");
    sb.append("    encodedType: ").append(toIndentedString(encodedType)).append("\n");
    sb.append("    encrypt: ").append(toIndentedString(encrypt)).append("\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    logoType: ").append(toIndentedString(logoType)).append("\n");
    sb.append("    md5: ").append(toIndentedString(md5)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    storeUri: ").append(toIndentedString(storeUri)).append("\n");
    sb.append("    tosStorageClass: ").append(toIndentedString(tosStorageClass)).append("\n");
    sb.append("    videoStreamMeta: ").append(toIndentedString(videoStreamMeta)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
