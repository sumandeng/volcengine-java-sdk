/*
 * redis
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.redis.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * PlannedEventForDescribePlannedEventsOutput
 */



public class PlannedEventForDescribePlannedEventsOutput {
  @SerializedName("ActionName")
  private String actionName = null;

  @SerializedName("CanCancel")
  private Boolean canCancel = null;

  @SerializedName("CanModifyTime")
  private Boolean canModifyTime = null;

  @SerializedName("EventId")
  private String eventId = null;

  @SerializedName("InstanceId")
  private String instanceId = null;

  @SerializedName("InstanceName")
  private String instanceName = null;

  @SerializedName("MaxEndTime")
  private String maxEndTime = null;

  @SerializedName("PlanEndTime")
  private String planEndTime = null;

  @SerializedName("PlanStartTime")
  private String planStartTime = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("Initiated")
    INITIATED("Initiated"),
    @SerializedName("Waiting")
    WAITING("Waiting"),
    @SerializedName("Running")
    RUNNING("Running"),
    @SerializedName("Success")
    SUCCESS("Success"),
    @SerializedName("Failed")
    FAILED("Failed"),
    @SerializedName("Canceled")
    CANCELED("Canceled"),
    @SerializedName("Abandoned")
    ABANDONED("Abandoned");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Status")
  private StatusEnum status = null;

  @SerializedName("Type")
  private String type = null;

  public PlannedEventForDescribePlannedEventsOutput actionName(String actionName) {
    this.actionName = actionName;
    return this;
  }

   /**
   * Get actionName
   * @return actionName
  **/
  @Schema(description = "")
  public String getActionName() {
    return actionName;
  }

  public void setActionName(String actionName) {
    this.actionName = actionName;
  }

  public PlannedEventForDescribePlannedEventsOutput canCancel(Boolean canCancel) {
    this.canCancel = canCancel;
    return this;
  }

   /**
   * Get canCancel
   * @return canCancel
  **/
  @Schema(description = "")
  public Boolean isCanCancel() {
    return canCancel;
  }

  public void setCanCancel(Boolean canCancel) {
    this.canCancel = canCancel;
  }

  public PlannedEventForDescribePlannedEventsOutput canModifyTime(Boolean canModifyTime) {
    this.canModifyTime = canModifyTime;
    return this;
  }

   /**
   * Get canModifyTime
   * @return canModifyTime
  **/
  @Schema(description = "")
  public Boolean isCanModifyTime() {
    return canModifyTime;
  }

  public void setCanModifyTime(Boolean canModifyTime) {
    this.canModifyTime = canModifyTime;
  }

  public PlannedEventForDescribePlannedEventsOutput eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * Get eventId
   * @return eventId
  **/
  @Schema(description = "")
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }

  public PlannedEventForDescribePlannedEventsOutput instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Get instanceId
   * @return instanceId
  **/
  @Schema(description = "")
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }

  public PlannedEventForDescribePlannedEventsOutput instanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

   /**
   * Get instanceName
   * @return instanceName
  **/
  @Schema(description = "")
  public String getInstanceName() {
    return instanceName;
  }

  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }

  public PlannedEventForDescribePlannedEventsOutput maxEndTime(String maxEndTime) {
    this.maxEndTime = maxEndTime;
    return this;
  }

   /**
   * Get maxEndTime
   * @return maxEndTime
  **/
  @Schema(description = "")
  public String getMaxEndTime() {
    return maxEndTime;
  }

  public void setMaxEndTime(String maxEndTime) {
    this.maxEndTime = maxEndTime;
  }

  public PlannedEventForDescribePlannedEventsOutput planEndTime(String planEndTime) {
    this.planEndTime = planEndTime;
    return this;
  }

   /**
   * Get planEndTime
   * @return planEndTime
  **/
  @Schema(description = "")
  public String getPlanEndTime() {
    return planEndTime;
  }

  public void setPlanEndTime(String planEndTime) {
    this.planEndTime = planEndTime;
  }

  public PlannedEventForDescribePlannedEventsOutput planStartTime(String planStartTime) {
    this.planStartTime = planStartTime;
    return this;
  }

   /**
   * Get planStartTime
   * @return planStartTime
  **/
  @Schema(description = "")
  public String getPlanStartTime() {
    return planStartTime;
  }

  public void setPlanStartTime(String planStartTime) {
    this.planStartTime = planStartTime;
  }

  public PlannedEventForDescribePlannedEventsOutput status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public PlannedEventForDescribePlannedEventsOutput type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlannedEventForDescribePlannedEventsOutput plannedEventForDescribePlannedEventsOutput = (PlannedEventForDescribePlannedEventsOutput) o;
    return Objects.equals(this.actionName, plannedEventForDescribePlannedEventsOutput.actionName) &&
        Objects.equals(this.canCancel, plannedEventForDescribePlannedEventsOutput.canCancel) &&
        Objects.equals(this.canModifyTime, plannedEventForDescribePlannedEventsOutput.canModifyTime) &&
        Objects.equals(this.eventId, plannedEventForDescribePlannedEventsOutput.eventId) &&
        Objects.equals(this.instanceId, plannedEventForDescribePlannedEventsOutput.instanceId) &&
        Objects.equals(this.instanceName, plannedEventForDescribePlannedEventsOutput.instanceName) &&
        Objects.equals(this.maxEndTime, plannedEventForDescribePlannedEventsOutput.maxEndTime) &&
        Objects.equals(this.planEndTime, plannedEventForDescribePlannedEventsOutput.planEndTime) &&
        Objects.equals(this.planStartTime, plannedEventForDescribePlannedEventsOutput.planStartTime) &&
        Objects.equals(this.status, plannedEventForDescribePlannedEventsOutput.status) &&
        Objects.equals(this.type, plannedEventForDescribePlannedEventsOutput.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionName, canCancel, canModifyTime, eventId, instanceId, instanceName, maxEndTime, planEndTime, planStartTime, status, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlannedEventForDescribePlannedEventsOutput {\n");
    
    sb.append("    actionName: ").append(toIndentedString(actionName)).append("\n");
    sb.append("    canCancel: ").append(toIndentedString(canCancel)).append("\n");
    sb.append("    canModifyTime: ").append(toIndentedString(canModifyTime)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    maxEndTime: ").append(toIndentedString(maxEndTime)).append("\n");
    sb.append("    planEndTime: ").append(toIndentedString(planEndTime)).append("\n");
    sb.append("    planStartTime: ").append(toIndentedString(planStartTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
