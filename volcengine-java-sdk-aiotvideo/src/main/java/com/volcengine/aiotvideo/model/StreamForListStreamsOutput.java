/*
 * aiotvideo
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.aiotvideo.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.aiotvideo.model.AIForListStreamsOutput;
import com.volcengine.aiotvideo.model.RecordForListStreamsOutput;
import com.volcengine.aiotvideo.model.ScreenshotForListStreamsOutput;
import com.volcengine.aiotvideo.model.TransPullUrlsForListStreamsOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * StreamForListStreamsOutput
 */



public class StreamForListStreamsOutput {
  @SerializedName("AI")
  private AIForListStreamsOutput AI = null;

  @SerializedName("ChannelID")
  private String channelID = null;

  @SerializedName("CreatedAt")
  private String createdAt = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("DeviceID")
  private String deviceID = null;

  @SerializedName("DeviceNSID")
  private String deviceNSID = null;

  @SerializedName("PullUrls")
  private List<String> pullUrls = null;

  @SerializedName("RecentPushTs")
  private String recentPushTs = null;

  @SerializedName("Record")
  private RecordForListStreamsOutput record = null;

  @SerializedName("Resolution")
  private String resolution = null;

  @SerializedName("RtpTransportTcp")
  private Boolean rtpTransportTcp = null;

  @SerializedName("SIPID")
  private String SIPID = null;

  @SerializedName("Screenshot")
  private ScreenshotForListStreamsOutput screenshot = null;

  @SerializedName("SpaceAccessType")
  private String spaceAccessType = null;

  @SerializedName("SpaceID")
  private String spaceID = null;

  @SerializedName("Status")
  private String status = null;

  @SerializedName("StreamID")
  private String streamID = null;

  @SerializedName("StreamName")
  private String streamName = null;

  @SerializedName("StreamingType")
  private String streamingType = null;

  @SerializedName("TransPullUrls")
  private TransPullUrlsForListStreamsOutput transPullUrls = null;

  @SerializedName("UpdatedAt")
  private String updatedAt = null;

  public StreamForListStreamsOutput AI(AIForListStreamsOutput AI) {
    this.AI = AI;
    return this;
  }

   /**
   * Get AI
   * @return AI
  **/
  @Valid
  @Schema(description = "")
  public AIForListStreamsOutput getAI() {
    return AI;
  }

  public void setAI(AIForListStreamsOutput AI) {
    this.AI = AI;
  }

  public StreamForListStreamsOutput channelID(String channelID) {
    this.channelID = channelID;
    return this;
  }

   /**
   * Get channelID
   * @return channelID
  **/
  @Schema(description = "")
  public String getChannelID() {
    return channelID;
  }

  public void setChannelID(String channelID) {
    this.channelID = channelID;
  }

  public StreamForListStreamsOutput createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(description = "")
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public StreamForListStreamsOutput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public StreamForListStreamsOutput deviceID(String deviceID) {
    this.deviceID = deviceID;
    return this;
  }

   /**
   * Get deviceID
   * @return deviceID
  **/
  @Schema(description = "")
  public String getDeviceID() {
    return deviceID;
  }

  public void setDeviceID(String deviceID) {
    this.deviceID = deviceID;
  }

  public StreamForListStreamsOutput deviceNSID(String deviceNSID) {
    this.deviceNSID = deviceNSID;
    return this;
  }

   /**
   * Get deviceNSID
   * @return deviceNSID
  **/
  @Schema(description = "")
  public String getDeviceNSID() {
    return deviceNSID;
  }

  public void setDeviceNSID(String deviceNSID) {
    this.deviceNSID = deviceNSID;
  }

  public StreamForListStreamsOutput pullUrls(List<String> pullUrls) {
    this.pullUrls = pullUrls;
    return this;
  }

  public StreamForListStreamsOutput addPullUrlsItem(String pullUrlsItem) {
    if (this.pullUrls == null) {
      this.pullUrls = new ArrayList<String>();
    }
    this.pullUrls.add(pullUrlsItem);
    return this;
  }

   /**
   * Get pullUrls
   * @return pullUrls
  **/
  @Schema(description = "")
  public List<String> getPullUrls() {
    return pullUrls;
  }

  public void setPullUrls(List<String> pullUrls) {
    this.pullUrls = pullUrls;
  }

  public StreamForListStreamsOutput recentPushTs(String recentPushTs) {
    this.recentPushTs = recentPushTs;
    return this;
  }

   /**
   * Get recentPushTs
   * @return recentPushTs
  **/
  @Schema(description = "")
  public String getRecentPushTs() {
    return recentPushTs;
  }

  public void setRecentPushTs(String recentPushTs) {
    this.recentPushTs = recentPushTs;
  }

  public StreamForListStreamsOutput record(RecordForListStreamsOutput record) {
    this.record = record;
    return this;
  }

   /**
   * Get record
   * @return record
  **/
  @Valid
  @Schema(description = "")
  public RecordForListStreamsOutput getRecord() {
    return record;
  }

  public void setRecord(RecordForListStreamsOutput record) {
    this.record = record;
  }

  public StreamForListStreamsOutput resolution(String resolution) {
    this.resolution = resolution;
    return this;
  }

   /**
   * Get resolution
   * @return resolution
  **/
  @Schema(description = "")
  public String getResolution() {
    return resolution;
  }

  public void setResolution(String resolution) {
    this.resolution = resolution;
  }

  public StreamForListStreamsOutput rtpTransportTcp(Boolean rtpTransportTcp) {
    this.rtpTransportTcp = rtpTransportTcp;
    return this;
  }

   /**
   * Get rtpTransportTcp
   * @return rtpTransportTcp
  **/
  @Schema(description = "")
  public Boolean isRtpTransportTcp() {
    return rtpTransportTcp;
  }

  public void setRtpTransportTcp(Boolean rtpTransportTcp) {
    this.rtpTransportTcp = rtpTransportTcp;
  }

  public StreamForListStreamsOutput SIPID(String SIPID) {
    this.SIPID = SIPID;
    return this;
  }

   /**
   * Get SIPID
   * @return SIPID
  **/
  @Schema(description = "")
  public String getSIPID() {
    return SIPID;
  }

  public void setSIPID(String SIPID) {
    this.SIPID = SIPID;
  }

  public StreamForListStreamsOutput screenshot(ScreenshotForListStreamsOutput screenshot) {
    this.screenshot = screenshot;
    return this;
  }

   /**
   * Get screenshot
   * @return screenshot
  **/
  @Valid
  @Schema(description = "")
  public ScreenshotForListStreamsOutput getScreenshot() {
    return screenshot;
  }

  public void setScreenshot(ScreenshotForListStreamsOutput screenshot) {
    this.screenshot = screenshot;
  }

  public StreamForListStreamsOutput spaceAccessType(String spaceAccessType) {
    this.spaceAccessType = spaceAccessType;
    return this;
  }

   /**
   * Get spaceAccessType
   * @return spaceAccessType
  **/
  @Schema(description = "")
  public String getSpaceAccessType() {
    return spaceAccessType;
  }

  public void setSpaceAccessType(String spaceAccessType) {
    this.spaceAccessType = spaceAccessType;
  }

  public StreamForListStreamsOutput spaceID(String spaceID) {
    this.spaceID = spaceID;
    return this;
  }

   /**
   * Get spaceID
   * @return spaceID
  **/
  @Schema(description = "")
  public String getSpaceID() {
    return spaceID;
  }

  public void setSpaceID(String spaceID) {
    this.spaceID = spaceID;
  }

  public StreamForListStreamsOutput status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public StreamForListStreamsOutput streamID(String streamID) {
    this.streamID = streamID;
    return this;
  }

   /**
   * Get streamID
   * @return streamID
  **/
  @Schema(description = "")
  public String getStreamID() {
    return streamID;
  }

  public void setStreamID(String streamID) {
    this.streamID = streamID;
  }

  public StreamForListStreamsOutput streamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

   /**
   * Get streamName
   * @return streamName
  **/
  @Schema(description = "")
  public String getStreamName() {
    return streamName;
  }

  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }

  public StreamForListStreamsOutput streamingType(String streamingType) {
    this.streamingType = streamingType;
    return this;
  }

   /**
   * Get streamingType
   * @return streamingType
  **/
  @Schema(description = "")
  public String getStreamingType() {
    return streamingType;
  }

  public void setStreamingType(String streamingType) {
    this.streamingType = streamingType;
  }

  public StreamForListStreamsOutput transPullUrls(TransPullUrlsForListStreamsOutput transPullUrls) {
    this.transPullUrls = transPullUrls;
    return this;
  }

   /**
   * Get transPullUrls
   * @return transPullUrls
  **/
  @Valid
  @Schema(description = "")
  public TransPullUrlsForListStreamsOutput getTransPullUrls() {
    return transPullUrls;
  }

  public void setTransPullUrls(TransPullUrlsForListStreamsOutput transPullUrls) {
    this.transPullUrls = transPullUrls;
  }

  public StreamForListStreamsOutput updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @Schema(description = "")
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamForListStreamsOutput streamForListStreamsOutput = (StreamForListStreamsOutput) o;
    return Objects.equals(this.AI, streamForListStreamsOutput.AI) &&
        Objects.equals(this.channelID, streamForListStreamsOutput.channelID) &&
        Objects.equals(this.createdAt, streamForListStreamsOutput.createdAt) &&
        Objects.equals(this.description, streamForListStreamsOutput.description) &&
        Objects.equals(this.deviceID, streamForListStreamsOutput.deviceID) &&
        Objects.equals(this.deviceNSID, streamForListStreamsOutput.deviceNSID) &&
        Objects.equals(this.pullUrls, streamForListStreamsOutput.pullUrls) &&
        Objects.equals(this.recentPushTs, streamForListStreamsOutput.recentPushTs) &&
        Objects.equals(this.record, streamForListStreamsOutput.record) &&
        Objects.equals(this.resolution, streamForListStreamsOutput.resolution) &&
        Objects.equals(this.rtpTransportTcp, streamForListStreamsOutput.rtpTransportTcp) &&
        Objects.equals(this.SIPID, streamForListStreamsOutput.SIPID) &&
        Objects.equals(this.screenshot, streamForListStreamsOutput.screenshot) &&
        Objects.equals(this.spaceAccessType, streamForListStreamsOutput.spaceAccessType) &&
        Objects.equals(this.spaceID, streamForListStreamsOutput.spaceID) &&
        Objects.equals(this.status, streamForListStreamsOutput.status) &&
        Objects.equals(this.streamID, streamForListStreamsOutput.streamID) &&
        Objects.equals(this.streamName, streamForListStreamsOutput.streamName) &&
        Objects.equals(this.streamingType, streamForListStreamsOutput.streamingType) &&
        Objects.equals(this.transPullUrls, streamForListStreamsOutput.transPullUrls) &&
        Objects.equals(this.updatedAt, streamForListStreamsOutput.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(AI, channelID, createdAt, description, deviceID, deviceNSID, pullUrls, recentPushTs, record, resolution, rtpTransportTcp, SIPID, screenshot, spaceAccessType, spaceID, status, streamID, streamName, streamingType, transPullUrls, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamForListStreamsOutput {\n");
    
    sb.append("    AI: ").append(toIndentedString(AI)).append("\n");
    sb.append("    channelID: ").append(toIndentedString(channelID)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    deviceID: ").append(toIndentedString(deviceID)).append("\n");
    sb.append("    deviceNSID: ").append(toIndentedString(deviceNSID)).append("\n");
    sb.append("    pullUrls: ").append(toIndentedString(pullUrls)).append("\n");
    sb.append("    recentPushTs: ").append(toIndentedString(recentPushTs)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    rtpTransportTcp: ").append(toIndentedString(rtpTransportTcp)).append("\n");
    sb.append("    SIPID: ").append(toIndentedString(SIPID)).append("\n");
    sb.append("    screenshot: ").append(toIndentedString(screenshot)).append("\n");
    sb.append("    spaceAccessType: ").append(toIndentedString(spaceAccessType)).append("\n");
    sb.append("    spaceID: ").append(toIndentedString(spaceID)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    streamID: ").append(toIndentedString(streamID)).append("\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    streamingType: ").append(toIndentedString(streamingType)).append("\n");
    sb.append("    transPullUrls: ").append(toIndentedString(transPullUrls)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
