/*
 * aiotvideo
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.aiotvideo.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * StreamStartRecordRequest
 */



public class StreamStartRecordRequest {
  @SerializedName("AutoPull")
  private Boolean autoPull = null;

  @SerializedName("Expire")
  private Integer expire = null;

  @SerializedName("RecordTime")
  private Integer recordTime = null;

  @SerializedName("Remux")
  private String remux = null;

  @SerializedName("SpaceID")
  private String spaceID = null;

  @SerializedName("StreamID")
  private String streamID = null;

  @SerializedName("Timeout")
  private Integer timeout = null;

  public StreamStartRecordRequest autoPull(Boolean autoPull) {
    this.autoPull = autoPull;
    return this;
  }

   /**
   * Get autoPull
   * @return autoPull
  **/
  @NotNull
  @Schema(required = true, description = "")
  public Boolean isAutoPull() {
    return autoPull;
  }

  public void setAutoPull(Boolean autoPull) {
    this.autoPull = autoPull;
  }

  public StreamStartRecordRequest expire(Integer expire) {
    this.expire = expire;
    return this;
  }

   /**
   * Get expire
   * @return expire
  **/
  @Schema(description = "")
  public Integer getExpire() {
    return expire;
  }

  public void setExpire(Integer expire) {
    this.expire = expire;
  }

  public StreamStartRecordRequest recordTime(Integer recordTime) {
    this.recordTime = recordTime;
    return this;
  }

   /**
   * Get recordTime
   * @return recordTime
  **/
  @Schema(description = "")
  public Integer getRecordTime() {
    return recordTime;
  }

  public void setRecordTime(Integer recordTime) {
    this.recordTime = recordTime;
  }

  public StreamStartRecordRequest remux(String remux) {
    this.remux = remux;
    return this;
  }

   /**
   * Get remux
   * @return remux
  **/
  @Schema(description = "")
  public String getRemux() {
    return remux;
  }

  public void setRemux(String remux) {
    this.remux = remux;
  }

  public StreamStartRecordRequest spaceID(String spaceID) {
    this.spaceID = spaceID;
    return this;
  }

   /**
   * Get spaceID
   * @return spaceID
  **/
  @Schema(description = "")
  public String getSpaceID() {
    return spaceID;
  }

  public void setSpaceID(String spaceID) {
    this.spaceID = spaceID;
  }

  public StreamStartRecordRequest streamID(String streamID) {
    this.streamID = streamID;
    return this;
  }

   /**
   * Get streamID
   * @return streamID
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getStreamID() {
    return streamID;
  }

  public void setStreamID(String streamID) {
    this.streamID = streamID;
  }

  public StreamStartRecordRequest timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * Get timeout
   * @return timeout
  **/
  @NotNull
  @Schema(required = true, description = "")
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamStartRecordRequest streamStartRecordRequest = (StreamStartRecordRequest) o;
    return Objects.equals(this.autoPull, streamStartRecordRequest.autoPull) &&
        Objects.equals(this.expire, streamStartRecordRequest.expire) &&
        Objects.equals(this.recordTime, streamStartRecordRequest.recordTime) &&
        Objects.equals(this.remux, streamStartRecordRequest.remux) &&
        Objects.equals(this.spaceID, streamStartRecordRequest.spaceID) &&
        Objects.equals(this.streamID, streamStartRecordRequest.streamID) &&
        Objects.equals(this.timeout, streamStartRecordRequest.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoPull, expire, recordTime, remux, spaceID, streamID, timeout);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamStartRecordRequest {\n");
    
    sb.append("    autoPull: ").append(toIndentedString(autoPull)).append("\n");
    sb.append("    expire: ").append(toIndentedString(expire)).append("\n");
    sb.append("    recordTime: ").append(toIndentedString(recordTime)).append("\n");
    sb.append("    remux: ").append(toIndentedString(remux)).append("\n");
    sb.append("    spaceID: ").append(toIndentedString(spaceID)).append("\n");
    sb.append("    streamID: ").append(toIndentedString(streamID)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
