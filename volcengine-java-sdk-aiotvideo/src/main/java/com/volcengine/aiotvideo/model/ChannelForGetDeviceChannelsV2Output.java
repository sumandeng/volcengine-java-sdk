/*
 * aiotvideo
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.aiotvideo.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.aiotvideo.model.DeviceItemForGetDeviceChannelsV2Output;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ChannelForGetDeviceChannelsV2Output
 */



public class ChannelForGetDeviceChannelsV2Output {
  @SerializedName("CreateAt")
  private String createAt = null;

  @SerializedName("DeviceItem")
  private List<DeviceItemForGetDeviceChannelsV2Output> deviceItem = null;

  @SerializedName("StreamID")
  private String streamID = null;

  public ChannelForGetDeviceChannelsV2Output createAt(String createAt) {
    this.createAt = createAt;
    return this;
  }

   /**
   * Get createAt
   * @return createAt
  **/
  @Schema(description = "")
  public String getCreateAt() {
    return createAt;
  }

  public void setCreateAt(String createAt) {
    this.createAt = createAt;
  }

  public ChannelForGetDeviceChannelsV2Output deviceItem(List<DeviceItemForGetDeviceChannelsV2Output> deviceItem) {
    this.deviceItem = deviceItem;
    return this;
  }

  public ChannelForGetDeviceChannelsV2Output addDeviceItemItem(DeviceItemForGetDeviceChannelsV2Output deviceItemItem) {
    if (this.deviceItem == null) {
      this.deviceItem = new ArrayList<DeviceItemForGetDeviceChannelsV2Output>();
    }
    this.deviceItem.add(deviceItemItem);
    return this;
  }

   /**
   * Get deviceItem
   * @return deviceItem
  **/
  @Valid
  @Schema(description = "")
  public List<DeviceItemForGetDeviceChannelsV2Output> getDeviceItem() {
    return deviceItem;
  }

  public void setDeviceItem(List<DeviceItemForGetDeviceChannelsV2Output> deviceItem) {
    this.deviceItem = deviceItem;
  }

  public ChannelForGetDeviceChannelsV2Output streamID(String streamID) {
    this.streamID = streamID;
    return this;
  }

   /**
   * Get streamID
   * @return streamID
  **/
  @Schema(description = "")
  public String getStreamID() {
    return streamID;
  }

  public void setStreamID(String streamID) {
    this.streamID = streamID;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelForGetDeviceChannelsV2Output channelForGetDeviceChannelsV2Output = (ChannelForGetDeviceChannelsV2Output) o;
    return Objects.equals(this.createAt, channelForGetDeviceChannelsV2Output.createAt) &&
        Objects.equals(this.deviceItem, channelForGetDeviceChannelsV2Output.deviceItem) &&
        Objects.equals(this.streamID, channelForGetDeviceChannelsV2Output.streamID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createAt, deviceItem, streamID);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelForGetDeviceChannelsV2Output {\n");
    
    sb.append("    createAt: ").append(toIndentedString(createAt)).append("\n");
    sb.append("    deviceItem: ").append(toIndentedString(deviceItem)).append("\n");
    sb.append("    streamID: ").append(toIndentedString(streamID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
