/*
 * resourcecenter
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.resourcecenter.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.resourcecenter.model.FilterForGetResourceCountsInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * GetResourceCountsRequest
 */



public class GetResourceCountsRequest {
  @SerializedName("Filter")
  private List<FilterForGetResourceCountsInput> filter = null;

  /**
   * Gets or Sets groupByKey
   */
  @JsonAdapter(GroupByKeyEnum.Adapter.class)
  public enum GroupByKeyEnum {
    @SerializedName("ResourceType")
    RESOURCETYPE("ResourceType"),
    @SerializedName("Region")
    REGION("Region");

    private String value;

    GroupByKeyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static GroupByKeyEnum fromValue(String input) {
      for (GroupByKeyEnum b : GroupByKeyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<GroupByKeyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupByKeyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public GroupByKeyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return GroupByKeyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("GroupByKey")
  private GroupByKeyEnum groupByKey = null;

  public GetResourceCountsRequest filter(List<FilterForGetResourceCountsInput> filter) {
    this.filter = filter;
    return this;
  }

  public GetResourceCountsRequest addFilterItem(FilterForGetResourceCountsInput filterItem) {
    if (this.filter == null) {
      this.filter = new ArrayList<FilterForGetResourceCountsInput>();
    }
    this.filter.add(filterItem);
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @Valid
  @Schema(description = "")
  public List<FilterForGetResourceCountsInput> getFilter() {
    return filter;
  }

  public void setFilter(List<FilterForGetResourceCountsInput> filter) {
    this.filter = filter;
  }

  public GetResourceCountsRequest groupByKey(GroupByKeyEnum groupByKey) {
    this.groupByKey = groupByKey;
    return this;
  }

   /**
   * Get groupByKey
   * @return groupByKey
  **/
  @NotNull
  @Schema(required = true, description = "")
  public GroupByKeyEnum getGroupByKey() {
    return groupByKey;
  }

  public void setGroupByKey(GroupByKeyEnum groupByKey) {
    this.groupByKey = groupByKey;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetResourceCountsRequest getResourceCountsRequest = (GetResourceCountsRequest) o;
    return Objects.equals(this.filter, getResourceCountsRequest.filter) &&
        Objects.equals(this.groupByKey, getResourceCountsRequest.groupByKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, groupByKey);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetResourceCountsRequest {\n");
    
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    groupByKey: ").append(toIndentedString(groupByKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
